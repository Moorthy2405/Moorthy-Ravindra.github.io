{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f50aa2e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from warnings import filterwarnings\n",
    "filterwarnings('ignore')\n",
    "\n",
    "pd.options.display.max_rows = 30\n",
    "pd.options.display.max_columns = None\n",
    "pd.options.display.float_format = '{:.6f}'.format\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "import statsmodels\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.stats.api as sms\n",
    "from statsmodels.compat import lzip\n",
    "from statsmodels.stats.anova import anova_lm\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from statsmodels.formula.api import ols\n",
    "from statsmodels.graphics.gofplots import qqplot\n",
    "from statsmodels.tools.eval_measures import rmse\n",
    "\n",
    "from scipy import stats\n",
    "from scipy.stats import shapiro\n",
    "\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "423ab232",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6719</td>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Immediate Possession</td>\n",
       "      <td>Hoskote</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SJowsn</td>\n",
       "      <td>800 - 2660</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.545000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2557</td>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3285</td>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Prtates</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1484</td>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Arcia S</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3620</td>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Sorisa</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     ID       area_type          availability             location       size  \\\n",
       "0  6719      Plot  Area  Immediate Possession              Hoskote        NaN   \n",
       "1  2557  Built-up  Area         Ready To Move               Anekal       1 RK   \n",
       "2  3285      Plot  Area            18-05-2024           Whitefield  4 Bedroom   \n",
       "3  1484    Carpet  Area            18-03-2024               Hebbal      2 BHK   \n",
       "4  3620  Built-up  Area         Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "\n",
       "   society       total_sqft     bath  balcony      price  \n",
       "0  SJowsn        800 - 2660      NaN      NaN  28.545000  \n",
       "1      NaN              351 1.000000 1.000000  16.000000  \n",
       "2  Prtates     500Sq. Yards 4.000000 2.000000 378.000000  \n",
       "3  Arcia S  547.34 - 827.31 2.000000 0.000000  42.720000  \n",
       "4  Sorisa              1750 3.000000 3.000000 149.000000  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a36616fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('ID', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4049db73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Immediate Possession</td>\n",
       "      <td>Hoskote</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SJowsn</td>\n",
       "      <td>800 - 2660</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.545000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Prtates</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Arcia S</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Sorisa</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type          availability             location       size  \\\n",
       "0      Plot  Area  Immediate Possession              Hoskote        NaN   \n",
       "1  Built-up  Area         Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area            18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area            18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area         Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "\n",
       "   society       total_sqft     bath  balcony      price  \n",
       "0  SJowsn        800 - 2660      NaN      NaN  28.545000  \n",
       "1      NaN              351 1.000000 1.000000  16.000000  \n",
       "2  Prtates     500Sq. Yards 4.000000 2.000000 378.000000  \n",
       "3  Arcia S  547.34 - 827.31 2.000000 0.000000  42.720000  \n",
       "4  Sorisa              1750 3.000000 3.000000 149.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "01bd8291",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10656 entries, 0 to 10655\n",
      "Data columns (total 9 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   area_type     10656 non-null  object \n",
      " 1   availability  10656 non-null  object \n",
      " 2   location      10655 non-null  object \n",
      " 3   size          10642 non-null  object \n",
      " 4   society       6228 non-null   object \n",
      " 5   total_sqft    10656 non-null  object \n",
      " 6   bath          10591 non-null  float64\n",
      " 7   balcony       10152 non-null  float64\n",
      " 8   price         10656 non-null  float64\n",
      "dtypes: float64(3), object(6)\n",
      "memory usage: 749.4+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f19282db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>avg_2bhk_rent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Krishnarajapura</td>\n",
       "      <td>11954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sarjapur</td>\n",
       "      <td>45000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Whitefield Hope Farm Junction</td>\n",
       "      <td>26370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Devanahalli</td>\n",
       "      <td>17302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Whitefield</td>\n",
       "      <td>14981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        location  avg_2bhk_rent\n",
       "0                Krishnarajapura          11954\n",
       "1                       Sarjapur          45000\n",
       "2  Whitefield Hope Farm Junction          26370\n",
       "3                    Devanahalli          17302\n",
       "4                     Whitefield          14981"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ar = pd.read_csv('avg_rent.csv')\n",
    "df_ar.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a8289404",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 157 entries, 0 to 156\n",
      "Data columns (total 2 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   location       157 non-null    object\n",
      " 1   avg_2bhk_rent  157 non-null    int64 \n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 2.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df_ar.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e208d387",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>dist_from_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Whitefield</td>\n",
       "      <td>17.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Sarjapur  Road</td>\n",
       "      <td>17.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Electronic City</td>\n",
       "      <td>18.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Kanakpura Road</td>\n",
       "      <td>26.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Thanisandra</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          location  dist_from_city\n",
       "0       Whitefield       17.300000\n",
       "1   Sarjapur  Road       17.200000\n",
       "2  Electronic City       18.100000\n",
       "3   Kanakpura Road       26.500000\n",
       "4      Thanisandra       11.500000"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dc = pd.read_csv('dist_from_city_centre.csv')\n",
    "df_dc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "62d41b3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 2 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   location        500 non-null    object \n",
      " 1   dist_from_city  500 non-null    float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 7.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_dc.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6d582e09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>avg_2bhk_rent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Immediate Possession</td>\n",
       "      <td>Hoskote</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SJowsn</td>\n",
       "      <td>800 - 2660</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.545000</td>\n",
       "      <td>16000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Prtates</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>14981.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Arcia S</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>17340.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Sorisa</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type          availability             location       size  \\\n",
       "0      Plot  Area  Immediate Possession              Hoskote        NaN   \n",
       "1  Built-up  Area         Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area            18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area            18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area         Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "\n",
       "   society       total_sqft     bath  balcony      price  avg_2bhk_rent  \n",
       "0  SJowsn        800 - 2660      NaN      NaN  28.545000   16000.000000  \n",
       "1      NaN              351 1.000000 1.000000  16.000000            NaN  \n",
       "2  Prtates     500Sq. Yards 4.000000 2.000000 378.000000   14981.000000  \n",
       "3  Arcia S  547.34 - 827.31 2.000000 0.000000  42.720000   17340.000000  \n",
       "4  Sorisa              1750 3.000000 3.000000 149.000000            NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(left=df, right=df_ar, how='left', on='location')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b72a7c01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>society</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>avg_2bhk_rent</th>\n",
       "      <th>dist_from_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>Immediate Possession</td>\n",
       "      <td>Hoskote</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SJowsn</td>\n",
       "      <td>800 - 2660</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.545000</td>\n",
       "      <td>16000.000000</td>\n",
       "      <td>24.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>34.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>Prtates</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>14981.000000</td>\n",
       "      <td>17.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>Arcia S</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>17340.000000</td>\n",
       "      <td>11.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>Sorisa</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type          availability             location       size  \\\n",
       "0      Plot  Area  Immediate Possession              Hoskote        NaN   \n",
       "1  Built-up  Area         Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area            18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area            18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area         Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "\n",
       "   society       total_sqft     bath  balcony      price  avg_2bhk_rent  \\\n",
       "0  SJowsn        800 - 2660      NaN      NaN  28.545000   16000.000000   \n",
       "1      NaN              351 1.000000 1.000000  16.000000            NaN   \n",
       "2  Prtates     500Sq. Yards 4.000000 2.000000 378.000000   14981.000000   \n",
       "3  Arcia S  547.34 - 827.31 2.000000 0.000000  42.720000   17340.000000   \n",
       "4  Sorisa              1750 3.000000 3.000000 149.000000            NaN   \n",
       "\n",
       "   dist_from_city  \n",
       "0       24.700000  \n",
       "1       34.200000  \n",
       "2       17.300000  \n",
       "3       11.100000  \n",
       "4             NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(left=df, right=df_dc, how='left', on='location')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "67b5b502",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10656 entries, 0 to 10655\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   area_type       10656 non-null  object \n",
      " 1   availability    10656 non-null  object \n",
      " 2   location        10655 non-null  object \n",
      " 3   size            10642 non-null  object \n",
      " 4   society         6228 non-null   object \n",
      " 5   total_sqft      10656 non-null  object \n",
      " 6   bath            10591 non-null  float64\n",
      " 7   balcony         10152 non-null  float64\n",
      " 8   price           10656 non-null  float64\n",
      " 9   avg_2bhk_rent   3677 non-null   float64\n",
      " 10  dist_from_city  9636 non-null   float64\n",
      "dtypes: float64(5), object(6)\n",
      "memory usage: 999.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "748ea3f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "area_type            0\n",
       "availability         0\n",
       "location             1\n",
       "size                14\n",
       "society           4428\n",
       "total_sqft           0\n",
       "bath                65\n",
       "balcony            504\n",
       "price                0\n",
       "avg_2bhk_rent     6979\n",
       "dist_from_city    1020\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2e39cf6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                missing_count  missing_pct\n",
      "avg_2bhk_rent            6979    65.493619\n",
      "society                  4428    41.554054\n",
      "dist_from_city           1020     9.572072\n",
      "balcony                   504     4.729730\n",
      "bath                       65     0.609985\n",
      "size                       14     0.131381\n",
      "location                    1     0.009384\n",
      "area_type                   0     0.000000\n",
      "availability                0     0.000000\n",
      "total_sqft                  0     0.000000\n",
      "price                       0     0.000000\n"
     ]
    }
   ],
   "source": [
    "def cal_missing_val():\n",
    "    missing_count = df.isnull().sum()\n",
    "    missing_pct = (missing_count / df.isnull().count())*100\n",
    "    df_missing_pct = pd.concat([missing_count, missing_pct], axis=1, keys=['missing_count', 'missing_pct'])\n",
    "    print(df_missing_pct.sort_values(ascending=False, by='missing_pct'))\n",
    "    \n",
    "cal_missing_val()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cca5684c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# avg_2bhk_rent and society columns we can drop\n",
    "df.drop(['avg_2bhk_rent', 'society'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0945a35f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for location, bath, and size small number of values missing so that row we can drop\n",
    "df.dropna(subset=[\"location\", 'bath','size'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ea791264",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                missing_count  missing_pct\n",
      "dist_from_city           1017     9.603399\n",
      "balcony                   439     4.145420\n",
      "area_type                   0     0.000000\n",
      "availability                0     0.000000\n",
      "location                    0     0.000000\n",
      "size                        0     0.000000\n",
      "total_sqft                  0     0.000000\n",
      "bath                        0     0.000000\n",
      "price                       0     0.000000\n"
     ]
    }
   ],
   "source": [
    "cal_missing_val()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7e2822fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1 Bedroom</td>\n",
       "      <td>5.31Acres</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location       size  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area     18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area     18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout  1 Bedroom   \n",
       "\n",
       "        total_sqft     bath  balcony      price  dist_from_city  \n",
       "1              351 1.000000 1.000000  16.000000       34.200000  \n",
       "2     500Sq. Yards 4.000000 2.000000 378.000000       17.300000  \n",
       "3  547.34 - 827.31 2.000000 0.000000  42.720000       11.100000  \n",
       "4             1750 3.000000 3.000000 149.000000             NaN  \n",
       "5        5.31Acres 1.000000 0.000000 110.000000             NaN  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9064589b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Super built-up  Area    6964\n",
       "Built-up  Area          1920\n",
       "Plot  Area              1637\n",
       "Carpet  Area              69\n",
       "Name: area_type, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['area_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "98679f42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ready To Move    8452\n",
       "18-05-2024        229\n",
       "18-12-2024        228\n",
       "18-04-2024        202\n",
       "18-08-2024        162\n",
       "                 ... \n",
       "16-11-2024          1\n",
       "17-02-2024          1\n",
       "15-12-2024          1\n",
       "20-04-2024          1\n",
       "15-08-2024          1\n",
       "Name: availability, Length: 78, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['availability'].value_counts()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "e743eff4",
   "metadata": {},
   "source": [
    "def cal_availability_days(val):\n",
    "    if str.lower(val) == 'immediate possession' or str.lower(val) == 'ready to move':\n",
    "        return 0\n",
    "    else:\n",
    "        date = datetime.strptime(val, '%d-%m-%Y')\n",
    "        cur_date = datetime.today()\n",
    "        ava_days = (date - cur_date).days\n",
    "        if ava_days > 0:\n",
    "            return ava_days\n",
    "        else:\n",
    "            return 0\n",
    "\n",
    "if 'availability_days' not in df.columns:\n",
    "    df['availability_days'] = df['availability'].apply(cal_availability_days)\n",
    "    df['availability_days'] = df['availability_days'].astype('int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ba90f1b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1 Bedroom</td>\n",
       "      <td>5.31Acres</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location       size  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area     18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area     18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout  1 Bedroom   \n",
       "\n",
       "        total_sqft     bath  balcony      price  dist_from_city  \\\n",
       "1              351 1.000000 1.000000  16.000000       34.200000   \n",
       "2     500Sq. Yards 4.000000 2.000000 378.000000       17.300000   \n",
       "3  547.34 - 827.31 2.000000 0.000000  42.720000       11.100000   \n",
       "4             1750 3.000000 3.000000 149.000000             NaN   \n",
       "5        5.31Acres 1.000000 0.000000 110.000000             NaN   \n",
       "\n",
       "     availability_period  \n",
       "1          Ready To Move  \n",
       "2  Available in 6 months  \n",
       "3  Available in 3 months  \n",
       "4          Ready To Move  \n",
       "5  Available in 3 months  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def convert_availability_to_category(val):\n",
    "    if val == 'Ready To Move':\n",
    "        return val\n",
    "    elif val == 'Immediate Possession':\n",
    "        return val\n",
    "    else:\n",
    "        diff_days = (datetime.strptime(val, '%d-%m-%Y') - datetime.now()).days\n",
    "        if diff_days <= 90:\n",
    "            return 'Available in 3 months'\n",
    "        elif diff_days <= 180:\n",
    "            return 'Available in 6 months'\n",
    "        elif diff_days <= 365:\n",
    "            return 'Available in 1 year'\n",
    "        else:\n",
    "            return 'Available after 1 year'\n",
    "\n",
    "\n",
    "if 'availability_period' not in df.columns: \n",
    "    df['availability_period'] = df['availability'].apply(convert_availability_to_category)\n",
    "    \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "416953d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ready To Move            8452\n",
       "Available in 1 year      1013\n",
       "Available in 3 months     571\n",
       "Available in 6 months     554\n",
       "Name: availability_period, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['availability_period'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "20f1fe7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(df['availability_period'])\n",
    "plt.xticks(rotation='vertical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7dca9ff9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1 RK</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4 Bedroom</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2 BHK</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3 BHK</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1 Bedroom</td>\n",
       "      <td>5.31Acres</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location       size  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal       1 RK   \n",
       "2      Plot  Area     18-05-2024           Whitefield  4 Bedroom   \n",
       "3    Carpet  Area     18-03-2024               Hebbal      2 BHK   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli      3 BHK   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout  1 Bedroom   \n",
       "\n",
       "        total_sqft     bath  balcony      price  dist_from_city  \\\n",
       "1              351 1.000000 1.000000  16.000000       34.200000   \n",
       "2     500Sq. Yards 4.000000 2.000000 378.000000       17.300000   \n",
       "3  547.34 - 827.31 2.000000 0.000000  42.720000       11.100000   \n",
       "4             1750 3.000000 3.000000 149.000000             NaN   \n",
       "5        5.31Acres 1.000000 0.000000 110.000000             NaN   \n",
       "\n",
       "     availability_period  \n",
       "1          Ready To Move  \n",
       "2  Available in 6 months  \n",
       "3  Available in 3 months  \n",
       "4          Ready To Move  \n",
       "5  Available in 3 months  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8a61ab6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['size'] = df['size'].apply(lambda x: x.split()[0])\n",
    "df['size'] = df['size'].astype('int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b4a9523c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1</td>\n",
       "      <td>351</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4</td>\n",
       "      <td>500Sq. Yards</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2</td>\n",
       "      <td>547.34 - 827.31</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3</td>\n",
       "      <td>1750</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1</td>\n",
       "      <td>5.31Acres</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location  size       total_sqft  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal     1              351   \n",
       "2      Plot  Area     18-05-2024           Whitefield     4     500Sq. Yards   \n",
       "3    Carpet  Area     18-03-2024               Hebbal     2  547.34 - 827.31   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli     3             1750   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout     1        5.31Acres   \n",
       "\n",
       "      bath  balcony      price  dist_from_city    availability_period  \n",
       "1 1.000000 1.000000  16.000000       34.200000          Ready To Move  \n",
       "2 4.000000 2.000000 378.000000       17.300000  Available in 6 months  \n",
       "3 2.000000 0.000000  42.720000       11.100000  Available in 3 months  \n",
       "4 3.000000 3.000000 149.000000             NaN          Ready To Move  \n",
       "5 1.000000 0.000000 110.000000             NaN  Available in 3 months  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "807820f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10590 entries, 1 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            10590 non-null  object \n",
      " 1   availability         10590 non-null  object \n",
      " 2   location             10590 non-null  object \n",
      " 3   size                 10590 non-null  int32  \n",
      " 4   total_sqft           10590 non-null  object \n",
      " 5   bath                 10590 non-null  float64\n",
      " 6   balcony              10151 non-null  float64\n",
      " 7   price                10590 non-null  float64\n",
      " 8   dist_from_city       9573 non-null   float64\n",
      " 9   availability_period  10590 non-null  object \n",
      "dtypes: float64(4), int32(1), object(5)\n",
      "memory usage: 868.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e0f046ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sq_yards_to_sq_feet(sq_yards):\n",
    "    return sq_yards * 9\n",
    "\n",
    "def sq_meters_to_sq_feet(sq_meters):\n",
    "    return sq_meters * 10.764\n",
    "\n",
    "def acres_to_sq_feet(acres):\n",
    "    return acres * 43560\n",
    "\n",
    "def perch_to_sq_feet(perches):\n",
    "    return perches * 272.25\n",
    "\n",
    "def cents_to_sq_feet(cents):\n",
    "    return cents * 435.6\n",
    "\n",
    "def guntha_to_sq_feet(guntha):\n",
    "    return guntha * 1089\n",
    "\n",
    "def grounds_to_sq_feet(grounds):\n",
    "    return grounds * 2400\n",
    "\n",
    "def extract_numeric(input_string):\n",
    "    numeric_part = ''.join(char for char in input_string if char.isdigit())\n",
    "    return float(numeric_part)\n",
    "\n",
    "def handle_total_sqft(val):\n",
    "    if '-' in val:\n",
    "        n = val.split(' - ')\n",
    "        n1 = float(n[0])\n",
    "        n2 = float(n[1])\n",
    "        return round( (n1+n2)/2  ,2 )\n",
    "    elif 'yards' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(sq_yards_to_sq_feet(val),2)\n",
    "    elif 'meter' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(sq_meters_to_sq_feet(val),2)\n",
    "    elif 'acres' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(acres_to_sq_feet(val),2)\n",
    "    elif 'perch' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(perch_to_sq_feet(val),2)\n",
    "    elif 'cents' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(cents_to_sq_feet(val),2)\n",
    "    elif 'guntha' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(guntha_to_sq_feet(val),2)\n",
    "    elif 'grounds' in str.lower(val):\n",
    "        val = extract_numeric(val)\n",
    "        return round(grounds_to_sq_feet(val),2)\n",
    "    else:\n",
    "        return float(val)\n",
    "\n",
    "df['total_sqft'] = df['total_sqft'].apply(handle_total_sqft)\n",
    "df['total_sqft'] = df['total_sqft'].astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3b00c87e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1</td>\n",
       "      <td>351.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4</td>\n",
       "      <td>4500.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1</td>\n",
       "      <td>23130360.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location  size      total_sqft  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal     1      351.000000   \n",
       "2      Plot  Area     18-05-2024           Whitefield     4     4500.000000   \n",
       "3    Carpet  Area     18-03-2024               Hebbal     2      687.330000   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli     3     1750.000000   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout     1 23130360.000000   \n",
       "\n",
       "      bath  balcony      price  dist_from_city    availability_period  \n",
       "1 1.000000 1.000000  16.000000       34.200000          Ready To Move  \n",
       "2 4.000000 2.000000 378.000000       17.300000  Available in 6 months  \n",
       "3 2.000000 0.000000  42.720000       11.100000  Available in 3 months  \n",
       "4 3.000000 3.000000 149.000000             NaN          Ready To Move  \n",
       "5 1.000000 0.000000 110.000000             NaN  Available in 3 months  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bdcd7954",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10590 entries, 1 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            10590 non-null  object \n",
      " 1   availability         10590 non-null  object \n",
      " 2   location             10590 non-null  object \n",
      " 3   size                 10590 non-null  int32  \n",
      " 4   total_sqft           10590 non-null  float64\n",
      " 5   bath                 10590 non-null  float64\n",
      " 6   balcony              10151 non-null  float64\n",
      " 7   price                10590 non-null  float64\n",
      " 8   dist_from_city       9573 non-null   float64\n",
      " 9   availability_period  10590 non-null  object \n",
      "dtypes: float64(5), int32(1), object(4)\n",
      "memory usage: 868.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8d48e6a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10590 entries, 1 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            10590 non-null  object \n",
      " 1   availability         10590 non-null  object \n",
      " 2   location             10590 non-null  object \n",
      " 3   size                 10590 non-null  int32  \n",
      " 4   total_sqft           10590 non-null  float64\n",
      " 5   bath                 10590 non-null  int32  \n",
      " 6   balcony              10151 non-null  float64\n",
      " 7   price                10590 non-null  float64\n",
      " 8   dist_from_city       9573 non-null   float64\n",
      " 9   availability_period  10590 non-null  object \n",
      "dtypes: float64(4), int32(2), object(4)\n",
      "memory usage: 827.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df['bath'] = df['bath'].astype('int32')\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4556363f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.000000    4068\n",
       "1.000000    3894\n",
       "3.000000    1342\n",
       "0.000000     847\n",
       "Name: balcony, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['balcony'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "da77bbc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "balcony_mode = df['balcony'].mode()[0]\n",
    "df['balcony'].fillna(balcony_mode, inplace=True)\n",
    "df['balcony'] = df['balcony'].astype('int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7c0594e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10590 entries, 1 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            10590 non-null  object \n",
      " 1   availability         10590 non-null  object \n",
      " 2   location             10590 non-null  object \n",
      " 3   size                 10590 non-null  int32  \n",
      " 4   total_sqft           10590 non-null  float64\n",
      " 5   bath                 10590 non-null  int32  \n",
      " 6   balcony              10590 non-null  int32  \n",
      " 7   price                10590 non-null  float64\n",
      " 8   dist_from_city       9573 non-null   float64\n",
      " 9   availability_period  10590 non-null  object \n",
      "dtypes: float64(3), int32(3), object(4)\n",
      "memory usage: 786.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b2eda760",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17.300000    448\n",
       "17.200000    372\n",
       "12.900000    318\n",
       "18.100000    248\n",
       "11.500000    232\n",
       "            ... \n",
       "12.600000      3\n",
       "2.200000       3\n",
       "29.800000      3\n",
       "15.600000      2\n",
       "26.700000      2\n",
       "Name: dist_from_city, Length: 193, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['dist_from_city'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b896ac70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count   9573.000000\n",
       "mean      15.168672\n",
       "std        6.223837\n",
       "min        1.900000\n",
       "25%       11.100000\n",
       "50%       14.400000\n",
       "75%       17.400000\n",
       "max       47.700000\n",
       "Name: dist_from_city, dtype: float64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['dist_from_city'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b046c041",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='dist_from_city'>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEHCAYAAACQkJyuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAOR0lEQVR4nO3df5Bd5V3H8c8nSbXbCbVGMKOb6Gq2NqmGH0lkOrV1FqZ/AJIW0FhUxqrjOERmCT9qQZgxJjMyzaQwwk6FYbC2M2gjsWBJJnGkDQuMjpZshA2aqBsQk9gCNdNCzJZOyNc/zrnJ3V/Ze3fv3u9uzvs1w+Tec+99zpNnl/ecPbl7riNCAID2m5c9AQCoKgIMAEkIMAAkIcAAkIQAA0CSBc08+fzzz4+urq4ZmgoAnJsGBga+HREXjN7eVIC7urq0d+/e1s0KACrA9qvjbecUBAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQJKmPhMOjevr69PQ0FDLxz169KgkqbOzs2Vjdnd3q7e3t2XjAWgMAZ4hQ0NDeuGlA3rnPYtaOu78E9+VJH3r7dZ86eafONaScQA0jwDPoHfes0jDy69q6ZgdB3dJUsvGrY0HoP04BwwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJ2hLgvr4+9fX1tWNXQEP4nsRssKAdOxkaGmrHboCG8T2J2YBTEACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQJIF2RMAshw+fFg9PT1at26dbrrpJm3atElPP/306cf7+/u1Z88ebd68ecTr+vv7dfPNN2twcFAdHR0aHh7WsmXL9Morr2jr1q1avXr1mH319PSMeP0DDzygxx9//PQ22yP2LUnr16/XgQMHtHLlSvX19Y37d6gfV5JWrVql++67b8K/c21MSbrxxht1/fXXT/jcyfYlFX+XuWzLli3avXu31q5dq9tvv33c54z+2rUSR8CorGPHjkmStm/fLkljAihJ99xzz7ivHRwclCQNDw9Lkg4dOqRTp05p48aNDe27Pr6SFBFjnlML5f79+xsaU5L27dt31sdrY0rSQw891PC456rdu3dLknbs2JGyfwKMSjp8+PCI+zfccMOY5/T09OjkyZPjbp/I8ePHNTAwcNbnT/T6yy677PTt9evXj3ist7e34Xncdttt424fPaYkbdu2bdznNrqvs63FbLdly5YR9++9994xz2n0azdVbTkFcfToUQ0PD2vDhg3t2N2sMDQ0pHnfH3tUM9vM+96bGhp6q1JfG+nM0W/NkSNHWjb2xo0btXPnzqZfV38UXH+kKrXmKHj0mFJxFNzMaYhzSe3ot2bHjh0TnoaYKZMeAdv+Pdt7be9944032jEnYE47fvx49hQwR0x6BBwRD0t6WJLWrFkzpUO6zs5OSdL9998/lZfPSRs2bNDAy69lT2NSp979XnX/9OJKfW2kmf3ReeHChTM2Ns4tnANGJS1atGjE/SVLlrRs7E2bNk3pdbZP316xYsWIx1auXNnwOKtWrRp3++gxpeKdEFV15ZVXjri/du3ats+BAKOSli5dOuL+o48+OuY5/f39WrBg7A+JZ3sr0sKFC8e8DW308yd6ff27MB588MERj433NrSJxpnobWijx5TU8PnfifY1l9+Gdscdd4y4P97530a/dlNFgFFZtaPgdevWSRr5LoSau+66a9zXXnjhhZKkjo4OSdKyZcs0b968ho9+r7vuuhH3649+a2pHrK04+h09plTto9+a2lFwxtGvJHm89x9OZM2aNbF3796md1L7F/YqnWesnQMeXn5VS8ftOLhLklo2bsfBXVpdwXPAVfyeRB7bAxGxZvR2joABIAkBBoAkBBgAkhBgAEhCgAEgCQEGgCQEGACSEGAASEKAASAJAQaAJAQYAJIQYABIQoABIAkBBoAkBBgAkhBgAEhCgAEgCQEGgCQEGACSEGAASEKAASAJAQaAJAQYAJIQYABIQoABIAkBBoAkBBgAkhBgAEhCgAEgCQEGgCQEGACSEGAASEKAASAJAQaAJAQYAJIQYABIQoABIAkBBoAkC9qxk+7u7nbsBmgY35OYDdoS4N7e3nbsBmgY35OYDTgFAQBJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAkgXZEziXzT9xTB0Hd7V4zP+VpJaNO//EMUmLWzIWgOYQ4BnS3d09I+MePXpSktTZ2apoLp6xuQI4OwI8Q3p7e7OnAGCW4xwwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkIMAAkIcAAkIQAA0ASAgwASQgwACQhwACQhAADQBICDABJCDAAJCHAAJCEAANAEgIMAEkcEY0/2X5D0quSzpf07Zma1BzDWhRYhzNYiwLrcMZPRsQFozc2FeDTL7L3RsSalkxrjmMtCqzDGaxFgXWYHKcgACAJAQaAJFMN8MMtncXcxloUWIczWIsC6zCJKZ0DBgBMH6cgACAJAQaAJE0H2PYVtv/d9pDtO2diUrOR7S/Yft32S3XbFtl+yvZ/ln/+cOYc28X2UttP2z5g+19tbyi3V2o9bL/b9jdsv1iuw6Zye6XWocb2fNv/Yntneb+S69CMpgJse76kz0u6UtIHJf2a7Q/OxMRmoS9KumLUtjslfT0i3i/p6+X9Kjgp6faIWCHpQ5JuKr8PqrYeb0u6PCIuknSxpCtsf0jVW4eaDZIO1N2v6jo0rNkj4EslDUXEyxHxfUnbJH2i9dOafSLiWUnHRm3+hKQvlbe/JOmads4pS0R8MyL2lbffUvE/Xacqth5ROF7efVf5X6hi6yBJtpdI+iVJj9Rtrtw6NKvZAHdKOlx3/0i5raoWR8Q3pSJKkn40eT5tZ7tL0iWS/lkVXI/yx+4XJL0u6amIqOQ6SPpTSZ+RdKpuWxXXoSnNBtjjbON9bBVle6Gkr0i6JSLezJ5Phoh4JyIulrRE0qW2fy55Sm1n+2pJr0fEQPZc5ppmA3xE0tK6+0sk/U/rpjPnvGb7xySp/PP15Pm0je13qYjvX0bE4+Xmyq5HRHxHUr+Kfyeo2jr8gqSP2/4vFaclL7f9qKq3Dk1rNsDPS3q/7Z+y/QOSrpf0ZOunNWc8KelT5e1PSfpq4lzaxrYl/bmkAxFxX91DlVoP2xfYfl95u0PSxyQdVMXWISL+MCKWRESXiibsiYgbVLF1mIqmfxPO9lUqzvfMl/SFiPiTGZjXrGP7y5J6VFxi7zVJGyX9raTHJP2EpP+WtC4iRv9D3TnH9kckPSdpv86c87tLxXngyqyH7QtV/OPSfBUHM49FxGbbP6IKrUM92z2SPh0RV1d5HRrFryIDQBJ+Ew4AkhBgAEhCgAEgCQEGgCQEGACSEGAASEKA0VK2/9j2p21vtv2xszzvmsmupGd7ue0XykscLmv9bBtj+x/LP7ts/3rWPHDuIcCYERHxRxHxtbM85RoVlzQ9m2skfTUiLomIQ7WNLrTtezciPlze7JJEgNEyBBjTZvvu8iL9X5P0gXLbF23/Snn7s7b/zfag7c/Z/rCkj0vaWh7hjjm6LX/j8hZJv1te/L2rvAD8n0naJ2mp7a22X7K93/Yny9f12H7G9mO2/6Pc92+UF07ff7YjaduLbT9RXmD9xXKesl275ORnJX20nPOttp+zfXHd6/+h/O04oCELsieAuc32ahW//3+Jiu+nfZIG6h5fJOlaScsjImy/LyK+Y/tJSTsj4m/GGzcidtl+SNLxiPhcednLD0j67Yj4fdu/rOIi6Bep+PXw520/W778IkkrVFy/+WVJj0TEpS4+uaNXRdjH84CkZyLi2vLDBxaOevxOlb9mW/7djkn6LUm32P4ZST8YEYOTrxpQ4AgY0/VRSU9ExInykpSjL870pqTvSXrE9nWSTkxjX69GxD+Vtz8i6cvl5SBfk/SMpJ8vH3u+vGj825IOSfr7cvt+FacRJnK5pAel05eZ/O4k89ku6eryynC/o+JTU4CGEWC0woQXFImIkyo+SeUrKs7p/t009vN/dbfHuzZ1zdt1t0/V3T+lFv7UFxEnJD2l4pMfflXSX7VqbFQDAcZ0PSvpWtsdts+TtLb+wfKi7T8UEbtU/Oh/cfnQW5LOm+Z+P1l+IsUFkn5R0jemMZ5UfG7Zeun0J128d9Tj4835ERWnLp7nSl9oFgHGtJSfDffXkl5QcZT73KinnCdpp+1BFacJbi23b5P0B9N4i9kTkgYlvShpj6TPRMS3pjBOvQ2SLrO9X8V57J8d9figpJPlP9DdKknlp0C8KekvprlvVBCXowSmwfaPq/gkjOURcWqSpwMjcAQMTJHt31RxEfq7iS+mgiNgpLP9eRWfK1bv/oiYkR/rbd8tad2ozdur8ukumD0IMAAk4RQEACQhwACQhAADQBICDABJ/h9D36J1/YIyYwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['dist_from_city'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1e4b3d0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15.168672307531306"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d_mean = df['dist_from_city'].mean()\n",
    "d_mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "badf4041",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.4"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d_med = df['dist_from_city'].median()\n",
    "d_med"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7fa30bc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count   10590.000000\n",
       "mean       15.168672\n",
       "std         5.917416\n",
       "min         1.900000\n",
       "25%        11.500000\n",
       "50%        15.100000\n",
       "75%        17.300000\n",
       "max        47.700000\n",
       "Name: dist_from_city, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dist_mean = df['dist_from_city'].fillna(d_mean)\n",
    "df_dist_mean.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "543b2846",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count   10590.000000\n",
       "mean       15.094854\n",
       "std         5.921749\n",
       "min         1.900000\n",
       "25%        11.500000\n",
       "50%        14.400000\n",
       "75%        17.300000\n",
       "max        47.700000\n",
       "Name: dist_from_city, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dist_median = df['dist_from_city'].fillna(d_med)\n",
    "df_dist_median.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c12570b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['dist_from_city'].fillna(d_med, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "10cdec65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10590 entries, 1 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            10590 non-null  object \n",
      " 1   availability         10590 non-null  object \n",
      " 2   location             10590 non-null  object \n",
      " 3   size                 10590 non-null  int32  \n",
      " 4   total_sqft           10590 non-null  float64\n",
      " 5   bath                 10590 non-null  int32  \n",
      " 6   balcony              10590 non-null  int32  \n",
      " 7   price                10590 non-null  float64\n",
      " 8   dist_from_city       10590 non-null  float64\n",
      " 9   availability_period  10590 non-null  object \n",
      "dtypes: float64(3), int32(3), object(4)\n",
      "memory usage: 786.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3920c0d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(), cbar=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "66b6b095",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "area_type              0\n",
       "availability           0\n",
       "location               0\n",
       "size                   0\n",
       "total_sqft             0\n",
       "bath                   0\n",
       "balcony                0\n",
       "price                  0\n",
       "dist_from_city         0\n",
       "availability_period    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ebdf40ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Anekal</td>\n",
       "      <td>1</td>\n",
       "      <td>351.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>34.200000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-05-2024</td>\n",
       "      <td>Whitefield</td>\n",
       "      <td>4</td>\n",
       "      <td>4500.000000</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>378.000000</td>\n",
       "      <td>17.300000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Plot  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Marathi Layout</td>\n",
       "      <td>1</td>\n",
       "      <td>23130360.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>110.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        area_type   availability             location  size      total_sqft  \\\n",
       "1  Built-up  Area  Ready To Move               Anekal     1      351.000000   \n",
       "2      Plot  Area     18-05-2024           Whitefield     4     4500.000000   \n",
       "3    Carpet  Area     18-03-2024               Hebbal     2      687.330000   \n",
       "4  Built-up  Area  Ready To Move  Devarabeesana Halli     3     1750.000000   \n",
       "5      Plot  Area     18-03-2024       Marathi Layout     1 23130360.000000   \n",
       "\n",
       "   bath  balcony      price  dist_from_city    availability_period  \n",
       "1     1        1  16.000000       34.200000          Ready To Move  \n",
       "2     4        2 378.000000       17.300000  Available in 6 months  \n",
       "3     2        0  42.720000       11.100000  Available in 3 months  \n",
       "4     3        3 149.000000       14.400000          Ready To Move  \n",
       "5     1        0 110.000000       14.400000  Available in 3 months  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "949bb042",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "size              669\n",
       "total_sqft        955\n",
       "bath              823\n",
       "balcony             0\n",
       "dist_from_city    683\n",
       "dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outliers_cols =  ['size', 'total_sqft', 'bath','balcony','dist_from_city']\n",
    "\n",
    "def cal_outliers(df, cols):\n",
    "    outliers_count = []\n",
    "    for col in cols:\n",
    "        q1 = df[col].quantile(0.25)\n",
    "        q3 = df[col].quantile(0.75)\n",
    "        iqr = q3 - q1\n",
    "        lb = q1 - 1.5*iqr\n",
    "        ub = q3 + 1.5*iqr\n",
    "        outliers = (df[col] < lb) | (df[col] > ub)\n",
    "        outliers_count.append(outliers.sum())\n",
    "    outliers_count = pd.Series(outliers_count, index=cols)\n",
    "    return outliers_count\n",
    "\n",
    "outliers_count = cal_outliers(df,outliers_cols)\n",
    "outliers_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c86b50b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Yelahanka New Town</td>\n",
       "      <td>1</td>\n",
       "      <td>284.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>Ready To Move</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>19-12-2024</td>\n",
       "      <td>Bhoganhalli</td>\n",
       "      <td>1</td>\n",
       "      <td>296.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 1 year</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>19-06-2024</td>\n",
       "      <td>Hormavu</td>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              area_type   availability             location  size  total_sqft  \\\n",
       "3          Carpet  Area     18-03-2024               Hebbal     2  687.330000   \n",
       "4        Built-up  Area  Ready To Move  Devarabeesana Halli     3 1750.000000   \n",
       "7  Super built-up  Area  Ready To Move   Yelahanka New Town     1  284.000000   \n",
       "8  Super built-up  Area     19-12-2024          Bhoganhalli     1  296.000000   \n",
       "9          Carpet  Area     19-06-2024              Hormavu     1  583.000000   \n",
       "\n",
       "   bath  balcony      price  dist_from_city    availability_period  \n",
       "3     2        0  42.720000       11.100000  Available in 3 months  \n",
       "4     3        3 149.000000       14.400000          Ready To Move  \n",
       "7     1        1   8.000000       21.500000          Ready To Move  \n",
       "8     1        0  22.890000       14.400000    Available in 1 year  \n",
       "9     1        0  28.275000       11.900000  Available in 6 months  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols_to_clear = ['size', 'total_sqft', 'bath', 'balcony','dist_from_city']\n",
    "\n",
    "def remove_outliers(df, cols_to_clear):\n",
    "    df_outliers = df.copy()\n",
    "    for col in cols_to_clear:\n",
    "        q1 = df[col].quantile(0.25)\n",
    "        q3 = df[col].quantile(0.75)\n",
    "        iqr = q3 - q1\n",
    "        lb = q1 - 1.5*iqr\n",
    "        ub = q3 + 1.5*iqr\n",
    "        outliers_mask = (df[col] < lb) | (df[col]>ub)\n",
    "        df_outliers = df_outliers[~outliers_mask]\n",
    "    return df_outliers\n",
    "df_outliers = remove_outliers(df, cols_to_clear)\n",
    "df_outliers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4112320a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 8436 entries, 3 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   area_type            8436 non-null   object \n",
      " 1   availability         8436 non-null   object \n",
      " 2   location             8436 non-null   object \n",
      " 3   size                 8436 non-null   int32  \n",
      " 4   total_sqft           8436 non-null   float64\n",
      " 5   bath                 8436 non-null   int32  \n",
      " 6   balcony              8436 non-null   int32  \n",
      " 7   price                8436 non-null   float64\n",
      " 8   dist_from_city       8436 non-null   float64\n",
      " 9   availability_period  8436 non-null   object \n",
      "dtypes: float64(3), int32(3), object(4)\n",
      "memory usage: 626.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df_outliers.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "97731e23",
   "metadata": {},
   "outputs": [],
   "source": [
    "cap_outliers_cols = ['total_sqft','dist_from_city']\n",
    "\n",
    "for col in cap_outliers_cols:\n",
    "    q1 = df_outliers[col].quantile(0.25)\n",
    "    q3 = df_outliers[col].quantile(0.75)\n",
    "    iqr = q3 - q1\n",
    "    lb = q1 - 1.5*iqr\n",
    "    ub = q3 + 1.5*iqr\n",
    "    lc = df_outliers[col].quantile(0.10)\n",
    "    uc = df_outliers[col].quantile(0.90)\n",
    "    df_outliers[col] = np.where(df_outliers[col] < lb, lc, df_outliers[col])\n",
    "    df_outliers[col] = np.where(df_outliers[col] > ub, uc, df_outliers[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "27e7e7bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "size              0\n",
       "total_sqft        0\n",
       "bath              0\n",
       "balcony           0\n",
       "dist_from_city    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cal_outliers(df_outliers, cols_to_clear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "91ac7653",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_num = df_outliers.select_dtypes(include=np.number)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "abe5f68e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8436.000000</td>\n",
       "      <td>8436.000000</td>\n",
       "      <td>8436.000000</td>\n",
       "      <td>8436.000000</td>\n",
       "      <td>8436.000000</td>\n",
       "      <td>8436.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.457089</td>\n",
       "      <td>1298.601908</td>\n",
       "      <td>2.320650</td>\n",
       "      <td>1.562707</td>\n",
       "      <td>81.361772</td>\n",
       "      <td>14.242793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.684269</td>\n",
       "      <td>348.069123</td>\n",
       "      <td>0.683244</td>\n",
       "      <td>0.782123</td>\n",
       "      <td>60.009735</td>\n",
       "      <td>3.963823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>432.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1089.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1240.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>14.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1530.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>17.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>2185.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1063.000000</td>\n",
       "      <td>24.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             size  total_sqft        bath     balcony       price  \\\n",
       "count 8436.000000 8436.000000 8436.000000 8436.000000 8436.000000   \n",
       "mean     2.457089 1298.601908    2.320650    1.562707   81.361772   \n",
       "std      0.684269  348.069123    0.683244    0.782123   60.009735   \n",
       "min      1.000000  432.000000    1.000000    0.000000    8.000000   \n",
       "25%      2.000000 1089.000000    2.000000    1.000000   48.000000   \n",
       "50%      2.000000 1240.000000    2.000000    2.000000   65.000000   \n",
       "75%      3.000000 1530.000000    3.000000    2.000000   95.000000   \n",
       "max      4.000000 2185.000000    4.000000    3.000000 1063.000000   \n",
       "\n",
       "       dist_from_city  \n",
       "count     8436.000000  \n",
       "mean        14.242793  \n",
       "std          3.963823  \n",
       "min          3.100000  \n",
       "25%         11.500000  \n",
       "50%         14.400000  \n",
       "75%         17.200000  \n",
       "max         24.700000  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_num.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0e5d157e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,3,figsize=(15,8))\n",
    "\n",
    "for col, subplot in zip(df_num.columns, ax.flatten()):\n",
    "    z = sns.boxplot(df_num[col], orient='h', whis=1.5, ax=subplot)\n",
    "    z.set_xlabel(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e71b1d26",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clear = df_outliers.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8847c52d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>area_type</th>\n",
       "      <th>availability</th>\n",
       "      <th>location</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "      <th>location_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>Hebbal</td>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "      <td>386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Devarabeesana Halli</td>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>Yelahanka New Town</td>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Super built-up  Area</td>\n",
       "      <td>19-12-2024</td>\n",
       "      <td>Bhoganhalli</td>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 1 year</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Carpet  Area</td>\n",
       "      <td>19-06-2024</td>\n",
       "      <td>Hormavu</td>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "      <td>407</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              area_type   availability             location  size  total_sqft  \\\n",
       "3          Carpet  Area     18-03-2024               Hebbal     2  687.330000   \n",
       "4        Built-up  Area  Ready To Move  Devarabeesana Halli     3 1750.000000   \n",
       "7  Super built-up  Area  Ready To Move   Yelahanka New Town     1  900.000000   \n",
       "8  Super built-up  Area     19-12-2024          Bhoganhalli     1  900.000000   \n",
       "9          Carpet  Area     19-06-2024              Hormavu     1  583.000000   \n",
       "\n",
       "   bath  balcony      price  dist_from_city    availability_period  \\\n",
       "3     2        0  42.720000       11.100000  Available in 3 months   \n",
       "4     3        3 149.000000       14.400000          Ready To Move   \n",
       "7     1        1   8.000000       21.500000          Ready To Move   \n",
       "8     1        0  22.890000       14.400000    Available in 1 year   \n",
       "9     1        0  28.275000       11.900000  Available in 6 months   \n",
       "\n",
       "   location_enc  \n",
       "3           386  \n",
       "4           270  \n",
       "7           979  \n",
       "8             2  \n",
       "9           407  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "le = LabelEncoder()\n",
    "df_clear['location_enc'] = le.fit_transform(df_clear['location'])\n",
    "df_clear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e1ab4ea8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clear.drop(['location'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "52ce3447",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>availability</th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>area_type_Super built-up  Area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18-03-2024</td>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>19-12-2024</td>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 1 year</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19-06-2024</td>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    availability  size  total_sqft  bath  balcony      price  dist_from_city  \\\n",
       "3     18-03-2024     2  687.330000     2        0  42.720000       11.100000   \n",
       "4  Ready To Move     3 1750.000000     3        3 149.000000       14.400000   \n",
       "7  Ready To Move     1  900.000000     1        1   8.000000       21.500000   \n",
       "8     19-12-2024     1  900.000000     1        0  22.890000       14.400000   \n",
       "9     19-06-2024     1  583.000000     1        0  28.275000       11.900000   \n",
       "\n",
       "     availability_period  location_enc  area_type_Built-up  Area  \\\n",
       "3  Available in 3 months           386                         0   \n",
       "4          Ready To Move           270                         1   \n",
       "7          Ready To Move           979                         0   \n",
       "8    Available in 1 year             2                         0   \n",
       "9  Available in 6 months           407                         0   \n",
       "\n",
       "   area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                       1                     0   \n",
       "4                       0                     0   \n",
       "7                       0                     0   \n",
       "8                       0                     0   \n",
       "9                       1                     0   \n",
       "\n",
       "   area_type_Super built-up  Area  \n",
       "3                               0  \n",
       "4                               0  \n",
       "7                               1  \n",
       "8                               1  \n",
       "9                               0  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clear = pd.get_dummies(df_clear, columns=['area_type'])\n",
    "df_clear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0aa0ce6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clear.drop(['availability'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "bb3c4ab3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>area_type_Super built-up  Area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 1 year</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   size  total_sqft  bath  balcony      price  dist_from_city  \\\n",
       "3     2  687.330000     2        0  42.720000       11.100000   \n",
       "4     3 1750.000000     3        3 149.000000       14.400000   \n",
       "7     1  900.000000     1        1   8.000000       21.500000   \n",
       "8     1  900.000000     1        0  22.890000       14.400000   \n",
       "9     1  583.000000     1        0  28.275000       11.900000   \n",
       "\n",
       "     availability_period  location_enc  area_type_Built-up  Area  \\\n",
       "3  Available in 3 months           386                         0   \n",
       "4          Ready To Move           270                         1   \n",
       "7          Ready To Move           979                         0   \n",
       "8    Available in 1 year             2                         0   \n",
       "9  Available in 6 months           407                         0   \n",
       "\n",
       "   area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                       1                     0   \n",
       "4                       0                     0   \n",
       "7                       0                     0   \n",
       "8                       0                     0   \n",
       "9                       1                     0   \n",
       "\n",
       "   area_type_Super built-up  Area  \n",
       "3                               0  \n",
       "4                               0  \n",
       "7                               1  \n",
       "8                               1  \n",
       "9                               0  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "af049bdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>availability_period</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>area_type_Super built-up  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>Available in 3 months</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>Ready To Move</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>Available in 1 year</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>Available in 6 months</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   size  total_sqft  bath  balcony      price  dist_from_city  \\\n",
       "3     2  687.330000     2        0  42.720000       11.100000   \n",
       "4     3 1750.000000     3        3 149.000000       14.400000   \n",
       "7     1  900.000000     1        1   8.000000       21.500000   \n",
       "8     1  900.000000     1        0  22.890000       14.400000   \n",
       "9     1  583.000000     1        0  28.275000       11.900000   \n",
       "\n",
       "     availability_period  location_enc  area_type_Built-up  Area  \\\n",
       "3  Available in 3 months           386                         0   \n",
       "4          Ready To Move           270                         1   \n",
       "7          Ready To Move           979                         0   \n",
       "8    Available in 1 year             2                         0   \n",
       "9  Available in 6 months           407                         0   \n",
       "\n",
       "   area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                       1                     0   \n",
       "4                       0                     0   \n",
       "7                       0                     0   \n",
       "8                       0                     0   \n",
       "9                       1                     0   \n",
       "\n",
       "   area_type_Super built-up  Area  availability_enc  \n",
       "3                               0          2.000000  \n",
       "4                               0          3.000000  \n",
       "7                               1          3.000000  \n",
       "8                               1          0.000000  \n",
       "9                               0          1.000000  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ava_categories = ['Available in 1 year', 'Available in 6 months', 'Available in 3 months', 'Ready To Move']\n",
    "oe = OrdinalEncoder(categories=[ava_categories])\n",
    "df_clear['availability_enc'] = oe.fit_transform(df_clear[['availability_period']])\n",
    "df_clear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "65e16eac",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clear.drop('availability_period',axis=1,inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "2cbd60c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 8436 entries, 3 to 10655\n",
      "Data columns (total 12 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   size                            8436 non-null   int32  \n",
      " 1   total_sqft                      8436 non-null   float64\n",
      " 2   bath                            8436 non-null   int32  \n",
      " 3   balcony                         8436 non-null   int32  \n",
      " 4   price                           8436 non-null   float64\n",
      " 5   dist_from_city                  8436 non-null   float64\n",
      " 6   location_enc                    8436 non-null   int32  \n",
      " 7   area_type_Built-up  Area        8436 non-null   uint8  \n",
      " 8   area_type_Carpet  Area          8436 non-null   uint8  \n",
      " 9   area_type_Plot  Area            8436 non-null   uint8  \n",
      " 10  area_type_Super built-up  Area  8436 non-null   uint8  \n",
      " 11  availability_enc                8436 non-null   float64\n",
      "dtypes: float64(4), int32(4), uint8(4)\n",
      "memory usage: 494.3 KB\n"
     ]
    }
   ],
   "source": [
    "df_clear.info()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "cb7a78bd",
   "metadata": {},
   "source": [
    "df_clear.drop('area_type_Carpet  Area',axis=1,inplace=True)\n",
    "df_clear.drop('area_type_Plot  Area',axis=1,inplace=True)\n",
    "df_clear.drop('area_type_Super built-up  Area',axis=1,inplace=True)\n",
    "df_clear.drop('location_enc',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "fea2d8bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>price</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>area_type_Super built-up  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>687.330000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42.720000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1750.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>149.000000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>22.890000</td>\n",
       "      <td>14.400000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>583.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28.275000</td>\n",
       "      <td>11.900000</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   size  total_sqft  bath  balcony      price  dist_from_city  location_enc  \\\n",
       "3     2  687.330000     2        0  42.720000       11.100000           386   \n",
       "4     3 1750.000000     3        3 149.000000       14.400000           270   \n",
       "7     1  900.000000     1        1   8.000000       21.500000           979   \n",
       "8     1  900.000000     1        0  22.890000       14.400000             2   \n",
       "9     1  583.000000     1        0  28.275000       11.900000           407   \n",
       "\n",
       "   area_type_Built-up  Area  area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                         0                       1                     0   \n",
       "4                         1                       0                     0   \n",
       "7                         0                       0                     0   \n",
       "8                         0                       0                     0   \n",
       "9                         0                       1                     0   \n",
       "\n",
       "   area_type_Super built-up  Area  availability_enc  \n",
       "3                               0          2.000000  \n",
       "4                               0          3.000000  \n",
       "7                               1          3.000000  \n",
       "8                               1          0.000000  \n",
       "9                               0          1.000000  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clear.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "25c61cef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,3, figsize=(15,8))\n",
    "\n",
    "for col, subplot in zip(df_clear.columns, ax.flatten()):\n",
    "    z = sns.histplot(df_clear[col], kde=True, ax=subplot)\n",
    "    z.set_xlabel(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ef2ebfa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ready = df_clear.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "c02ce2d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    42.720000\n",
       "4   149.000000\n",
       "7     8.000000\n",
       "8    22.890000\n",
       "9    28.275000\n",
       "Name: price, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df_ready['price']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "24c8d8ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ready.drop('price',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "86b37075",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>area_type_Super built-up  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-1.756284</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.792916</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.793465</td>\n",
       "      <td>1.296940</td>\n",
       "      <td>0.994361</td>\n",
       "      <td>1.837790</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-0.719504</td>\n",
       "      <td>1.830969</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-2.056041</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       size  total_sqft      bath   balcony  dist_from_city  location_enc  \\\n",
       "3 -0.668036   -1.756284 -0.469333 -1.998151       -0.792916           386   \n",
       "4  0.793465    1.296940  0.994361  1.837790        0.039663           270   \n",
       "7 -2.129536   -1.145248 -1.933026 -0.719504        1.830969           979   \n",
       "8 -2.129536   -1.145248 -1.933026 -1.998151        0.039663             2   \n",
       "9 -2.129536   -2.056041 -1.933026 -1.998151       -0.591079           407   \n",
       "\n",
       "   area_type_Built-up  Area  area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                         0                       1                     0   \n",
       "4                         1                       0                     0   \n",
       "7                         0                       0                     0   \n",
       "8                         0                       0                     0   \n",
       "9                         0                       1                     0   \n",
       "\n",
       "   area_type_Super built-up  Area  availability_enc  \n",
       "3                               0          2.000000  \n",
       "4                               0          3.000000  \n",
       "7                               1          3.000000  \n",
       "8                               1          0.000000  \n",
       "9                               0          1.000000  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ss = StandardScaler()\n",
    "\n",
    "scale_cols = ['size','total_sqft','bath','balcony','dist_from_city']\n",
    "\n",
    "df_ready_scaled = df_ready.copy()\n",
    "\n",
    "for col in scale_cols:\n",
    "    df_ready_scaled[col] = ss.fit_transform(df_ready[[col]])\n",
    "    \n",
    "df_ready_scaled.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "87cb23f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df_ready_scaled\n",
    "X = sm.add_constant(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "eb31d2ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6748, 12)\n",
      "(1688, 12)\n",
      "(6748,)\n",
      "(1688,)\n"
     ]
    }
   ],
   "source": [
    "X_train_full, X_test_full, y_train_full, y_test_full = train_test_split(X, y, test_size=0.2, random_state=100)\n",
    "print(X_train_full.shape)\n",
    "print(X_test_full.shape)\n",
    "print(y_train_full.shape)\n",
    "print(y_test_full.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "850fb484",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.453</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.452</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   558.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 19 Jan 2024</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:58:58</td>     <th>  Log-Likelihood:    </th> <td> -35016.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6748</td>      <th>  AIC:               </th> <td>7.005e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6737</td>      <th>  BIC:               </th> <td>7.013e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    10</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                 <td></td>                   <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                          <td>   71.4563</td> <td>    1.934</td> <td>   36.940</td> <td> 0.000</td> <td>   67.664</td> <td>   75.248</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>size</th>                           <td>   -1.4778</td> <td>    0.927</td> <td>   -1.594</td> <td> 0.111</td> <td>   -3.295</td> <td>    0.339</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>total_sqft</th>                     <td>   27.9100</td> <td>    0.775</td> <td>   35.996</td> <td> 0.000</td> <td>   26.390</td> <td>   29.430</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bath</th>                           <td>    9.9457</td> <td>    0.920</td> <td>   10.807</td> <td> 0.000</td> <td>    8.142</td> <td>   11.750</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balcony</th>                        <td>   -2.2487</td> <td>    0.588</td> <td>   -3.826</td> <td> 0.000</td> <td>   -3.401</td> <td>   -1.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dist_from_city</th>                 <td>   -9.7433</td> <td>    0.544</td> <td>  -17.923</td> <td> 0.000</td> <td>  -10.809</td> <td>   -8.678</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>location_enc</th>                   <td>   -0.0022</td> <td>    0.002</td> <td>   -1.208</td> <td> 0.227</td> <td>   -0.006</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Built-up  Area</th>       <td>    4.1625</td> <td>    1.740</td> <td>    2.392</td> <td> 0.017</td> <td>    0.752</td> <td>    7.573</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Carpet  Area</th>         <td>    6.6733</td> <td>    5.202</td> <td>    1.283</td> <td> 0.200</td> <td>   -3.524</td> <td>   16.871</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Plot  Area</th>           <td>   59.2782</td> <td>    2.074</td> <td>   28.576</td> <td> 0.000</td> <td>   55.212</td> <td>   63.345</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Super built-up  Area</th> <td>    1.3422</td> <td>    1.523</td> <td>    0.881</td> <td> 0.378</td> <td>   -1.643</td> <td>    4.328</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>availability_enc</th>               <td>    1.2520</td> <td>    0.558</td> <td>    2.242</td> <td> 0.025</td> <td>    0.157</td> <td>    2.347</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>7348.501</td> <th>  Durbin-Watson:     </th>  <td>   2.045</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>1188253.425</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 5.262</td>  <th>  Prob(JB):          </th>  <td>    0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>67.151</td>  <th>  Cond. No.          </th>  <td>1.05e+17</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The smallest eigenvalue is 2.15e-25. This might indicate that there are<br/>strong multicollinearity problems or that the design matrix is singular."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.453\n",
       "Model:                            OLS   Adj. R-squared:                  0.452\n",
       "Method:                 Least Squares   F-statistic:                     558.5\n",
       "Date:                Fri, 19 Jan 2024   Prob (F-statistic):               0.00\n",
       "Time:                        12:58:58   Log-Likelihood:                -35016.\n",
       "No. Observations:                6748   AIC:                         7.005e+04\n",
       "Df Residuals:                    6737   BIC:                         7.013e+04\n",
       "Df Model:                          10                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==================================================================================================\n",
       "                                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------------\n",
       "const                             71.4563      1.934     36.940      0.000      67.664      75.248\n",
       "size                              -1.4778      0.927     -1.594      0.111      -3.295       0.339\n",
       "total_sqft                        27.9100      0.775     35.996      0.000      26.390      29.430\n",
       "bath                               9.9457      0.920     10.807      0.000       8.142      11.750\n",
       "balcony                           -2.2487      0.588     -3.826      0.000      -3.401      -1.096\n",
       "dist_from_city                    -9.7433      0.544    -17.923      0.000     -10.809      -8.678\n",
       "location_enc                      -0.0022      0.002     -1.208      0.227      -0.006       0.001\n",
       "area_type_Built-up  Area           4.1625      1.740      2.392      0.017       0.752       7.573\n",
       "area_type_Carpet  Area             6.6733      5.202      1.283      0.200      -3.524      16.871\n",
       "area_type_Plot  Area              59.2782      2.074     28.576      0.000      55.212      63.345\n",
       "area_type_Super built-up  Area     1.3422      1.523      0.881      0.378      -1.643       4.328\n",
       "availability_enc                   1.2520      0.558      2.242      0.025       0.157       2.347\n",
       "==============================================================================\n",
       "Omnibus:                     7348.501   Durbin-Watson:                   2.045\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1188253.425\n",
       "Skew:                           5.262   Prob(JB):                         0.00\n",
       "Kurtosis:                      67.151   Cond. No.                     1.05e+17\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The smallest eigenvalue is 2.15e-25. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "\"\"\""
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_full_model = sm.OLS(y_train_full, X_train_full).fit()\n",
    "price_full_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "c041ffdf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def show_corr(df):\n",
    "    plt.figure(figsize=(15,8))\n",
    "    sns.heatmap(df.corr()[abs(df.corr())>0.6], annot=True)\n",
    "\n",
    "show_corr(df_ready_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "61dcc1fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ready_vif = df_ready_scaled.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "2f1ccde0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>factor</th>\n",
       "      <th>feature</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8.078303</td>\n",
       "      <td>area_type_Super built-up  Area</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.082937</td>\n",
       "      <td>size</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3.034597</td>\n",
       "      <td>area_type_Built-up  Area</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.028739</td>\n",
       "      <td>bath</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2.527099</td>\n",
       "      <td>area_type_Plot  Area</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.164670</td>\n",
       "      <td>total_sqft</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.241572</td>\n",
       "      <td>balcony</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.057543</td>\n",
       "      <td>availability_enc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.053924</td>\n",
       "      <td>area_type_Carpet  Area</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.043690</td>\n",
       "      <td>dist_from_city</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.011197</td>\n",
       "      <td>location_enc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     factor                         feature\n",
       "9  8.078303  area_type_Super built-up  Area\n",
       "0  3.082937                            size\n",
       "6  3.034597        area_type_Built-up  Area\n",
       "2  3.028739                            bath\n",
       "8  2.527099            area_type_Plot  Area\n",
       "1  2.164670                      total_sqft\n",
       "3  1.241572                         balcony\n",
       "10 1.057543                availability_enc\n",
       "7  1.053924          area_type_Carpet  Area\n",
       "4  1.043690                  dist_from_city\n",
       "5  1.011197                    location_enc"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif = pd.DataFrame()\n",
    "\n",
    "vif['factor'] = [ variance_inflation_factor(df_ready_vif.values, i) for i in range(df_ready_vif.shape[1])]\n",
    "vif['feature'] = df_ready_vif.columns\n",
    "vif.sort_values(by='factor', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "04a188d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    factor                   feature\n",
      "0 3.081230                      size\n",
      "1 2.163770                total_sqft\n",
      "2 3.028672                      bath\n",
      "3 1.236082                   balcony\n",
      "4 1.039509            dist_from_city\n",
      "5 3.075411              location_enc\n",
      "6 1.282049  area_type_Built-up  Area\n",
      "7 1.011032    area_type_Carpet  Area\n",
      "8 1.519173      area_type_Plot  Area\n",
      "9 3.455101          availability_enc\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>location_enc</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-1.756284</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.792916</td>\n",
       "      <td>386</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.793465</td>\n",
       "      <td>1.296940</td>\n",
       "      <td>0.994361</td>\n",
       "      <td>1.837790</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>270</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-0.719504</td>\n",
       "      <td>1.830969</td>\n",
       "      <td>979</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-2.129536</td>\n",
       "      <td>-2.056041</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10649</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-0.857932</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>1.881429</td>\n",
       "      <td>595</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10650</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-0.602220</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>1.275917</td>\n",
       "      <td>312</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10651</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-0.324960</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.691998</td>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10653</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-0.623769</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>407</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10655</th>\n",
       "      <td>-0.668036</td>\n",
       "      <td>-0.527518</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.771323</td>\n",
       "      <td>972</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8436 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           size  total_sqft      bath   balcony  dist_from_city  location_enc  \\\n",
       "3     -0.668036   -1.756284 -0.469333 -1.998151       -0.792916           386   \n",
       "4      0.793465    1.296940  0.994361  1.837790        0.039663           270   \n",
       "7     -2.129536   -1.145248 -1.933026 -0.719504        1.830969           979   \n",
       "8     -2.129536   -1.145248 -1.933026 -1.998151        0.039663             2   \n",
       "9     -2.129536   -2.056041 -1.933026 -1.998151       -0.591079           407   \n",
       "...         ...         ...       ...       ...             ...           ...   \n",
       "10649 -0.668036   -0.857932 -0.469333 -1.998151        1.881429           595   \n",
       "10650 -0.668036   -0.602220 -0.469333 -1.998151        1.275917           312   \n",
       "10651 -0.668036   -0.324960 -0.469333 -1.998151       -0.691998           891   \n",
       "10653 -0.668036   -0.623769 -0.469333 -1.998151       -0.591079           407   \n",
       "10655 -0.668036   -0.527518 -0.469333 -1.998151        0.771323           972   \n",
       "\n",
       "       area_type_Built-up  Area  area_type_Carpet  Area  area_type_Plot  Area  \\\n",
       "3                             0                       1                     0   \n",
       "4                             1                       0                     0   \n",
       "7                             0                       0                     0   \n",
       "8                             0                       0                     0   \n",
       "9                             0                       1                     0   \n",
       "...                         ...                     ...                   ...   \n",
       "10649                         0                       0                     0   \n",
       "10650                         0                       0                     0   \n",
       "10651                         0                       0                     0   \n",
       "10653                         0                       0                     0   \n",
       "10655                         0                       0                     0   \n",
       "\n",
       "       availability_enc  \n",
       "3              2.000000  \n",
       "4              3.000000  \n",
       "7              3.000000  \n",
       "8              0.000000  \n",
       "9              1.000000  \n",
       "...                 ...  \n",
       "10649          0.000000  \n",
       "10650          0.000000  \n",
       "10651          0.000000  \n",
       "10653          3.000000  \n",
       "10655          0.000000  \n",
       "\n",
       "[8436 rows x 10 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(df_ready_vif.columns)):\n",
    "    vif = pd.DataFrame()\n",
    "\n",
    "    vif['factor'] = [ variance_inflation_factor(df_ready_vif.values, i) for i in range(df_ready_vif.shape[1])]\n",
    "    vif['feature'] = df_ready_vif.columns\n",
    "    multi = vif[vif['factor'] > 5]\n",
    "    \n",
    "    if multi.empty == False:\n",
    "        df_multi_sorted = multi.sort_values(by='factor',ascending=False)\n",
    "    else:\n",
    "        print(vif)\n",
    "        break\n",
    "        \n",
    "    if(df_multi_sorted.empty == False):\n",
    "        df_ready_vif = df_ready_vif.drop(df_multi_sorted.feature.iloc[0],axis=1)\n",
    "    else:\n",
    "        print(vif)\n",
    "        \n",
    "df_ready_vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "9a243dec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 8436 entries, 3 to 10655\n",
      "Data columns (total 10 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   size                      8436 non-null   float64\n",
      " 1   total_sqft                8436 non-null   float64\n",
      " 2   bath                      8436 non-null   float64\n",
      " 3   balcony                   8436 non-null   float64\n",
      " 4   dist_from_city            8436 non-null   float64\n",
      " 5   location_enc              8436 non-null   int32  \n",
      " 6   area_type_Built-up  Area  8436 non-null   uint8  \n",
      " 7   area_type_Carpet  Area    8436 non-null   uint8  \n",
      " 8   area_type_Plot  Area      8436 non-null   uint8  \n",
      " 9   availability_enc          8436 non-null   float64\n",
      "dtypes: float64(6), int32(1), uint8(3)\n",
      "memory usage: 519.0 KB\n"
     ]
    }
   ],
   "source": [
    "df_ready_vif.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "4c4cd9f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6748, 11)\n",
      "(1688, 11)\n",
      "(6748,)\n",
      "(1688,)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.453</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.452</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   558.5</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 19 Jan 2024</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:59:00</td>     <th>  Log-Likelihood:    </th> <td> -35016.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6748</td>      <th>  AIC:               </th> <td>7.005e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6737</td>      <th>  BIC:               </th> <td>7.013e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>    10</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                    <td>   72.7985</td> <td>    1.774</td> <td>   41.035</td> <td> 0.000</td> <td>   69.321</td> <td>   76.276</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>size</th>                     <td>   -1.4778</td> <td>    0.927</td> <td>   -1.594</td> <td> 0.111</td> <td>   -3.295</td> <td>    0.339</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>total_sqft</th>               <td>   27.9100</td> <td>    0.775</td> <td>   35.996</td> <td> 0.000</td> <td>   26.390</td> <td>   29.430</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bath</th>                     <td>    9.9457</td> <td>    0.920</td> <td>   10.807</td> <td> 0.000</td> <td>    8.142</td> <td>   11.750</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balcony</th>                  <td>   -2.2487</td> <td>    0.588</td> <td>   -3.826</td> <td> 0.000</td> <td>   -3.401</td> <td>   -1.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dist_from_city</th>           <td>   -9.7433</td> <td>    0.544</td> <td>  -17.923</td> <td> 0.000</td> <td>  -10.809</td> <td>   -8.678</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>location_enc</th>             <td>   -0.0022</td> <td>    0.002</td> <td>   -1.208</td> <td> 0.227</td> <td>   -0.006</td> <td>    0.001</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Built-up  Area</th> <td>    2.8202</td> <td>    1.418</td> <td>    1.989</td> <td> 0.047</td> <td>    0.041</td> <td>    5.600</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Carpet  Area</th>   <td>    5.3311</td> <td>    6.523</td> <td>    0.817</td> <td> 0.414</td> <td>   -7.457</td> <td>   18.119</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Plot  Area</th>     <td>   57.9360</td> <td>    2.083</td> <td>   27.813</td> <td> 0.000</td> <td>   53.853</td> <td>   62.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>availability_enc</th>         <td>    1.2520</td> <td>    0.558</td> <td>    2.242</td> <td> 0.025</td> <td>    0.157</td> <td>    2.347</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>7348.501</td> <th>  Durbin-Watson:     </th>  <td>   2.045</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>1188253.425</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 5.262</td>  <th>  Prob(JB):          </th>  <td>    0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>67.151</td>  <th>  Cond. No.          </th>  <td>7.32e+03</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 7.32e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.453\n",
       "Model:                            OLS   Adj. R-squared:                  0.452\n",
       "Method:                 Least Squares   F-statistic:                     558.5\n",
       "Date:                Fri, 19 Jan 2024   Prob (F-statistic):               0.00\n",
       "Time:                        12:59:00   Log-Likelihood:                -35016.\n",
       "No. Observations:                6748   AIC:                         7.005e+04\n",
       "Df Residuals:                    6737   BIC:                         7.013e+04\n",
       "Df Model:                          10                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "============================================================================================\n",
       "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------\n",
       "const                       72.7985      1.774     41.035      0.000      69.321      76.276\n",
       "size                        -1.4778      0.927     -1.594      0.111      -3.295       0.339\n",
       "total_sqft                  27.9100      0.775     35.996      0.000      26.390      29.430\n",
       "bath                         9.9457      0.920     10.807      0.000       8.142      11.750\n",
       "balcony                     -2.2487      0.588     -3.826      0.000      -3.401      -1.096\n",
       "dist_from_city              -9.7433      0.544    -17.923      0.000     -10.809      -8.678\n",
       "location_enc                -0.0022      0.002     -1.208      0.227      -0.006       0.001\n",
       "area_type_Built-up  Area     2.8202      1.418      1.989      0.047       0.041       5.600\n",
       "area_type_Carpet  Area       5.3311      6.523      0.817      0.414      -7.457      18.119\n",
       "area_type_Plot  Area        57.9360      2.083     27.813      0.000      53.853      62.019\n",
       "availability_enc             1.2520      0.558      2.242      0.025       0.157       2.347\n",
       "==============================================================================\n",
       "Omnibus:                     7348.501   Durbin-Watson:                   2.045\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1188253.425\n",
       "Skew:                           5.262   Prob(JB):                         0.00\n",
       "Kurtosis:                      67.151   Cond. No.                     7.32e+03\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 7.32e+03. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df_ready_vif\n",
    "X = sm.add_constant(X)\n",
    "X_train_signi, X_test_signi, y_train_signi, y_test_signi = train_test_split(X, y, test_size=0.2, random_state=100)\n",
    "print(X_train_signi.shape)\n",
    "print(X_test_signi.shape)\n",
    "print(y_train_signi.shape)\n",
    "print(y_test_signi.shape)\n",
    "price_signi_model = sm.OLS(y_train_signi, X_train_signi).fit()\n",
    "price_signi_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "5963be91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P-value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <td>0.413836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>location_enc</th>\n",
       "      <td>0.226935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>size</th>\n",
       "      <td>0.110929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <td>0.046728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>availability_enc</th>\n",
       "      <td>0.024976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>balcony</th>\n",
       "      <td>0.000132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bath</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dist_from_city</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_sqft</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          P-value\n",
       "area_type_Carpet  Area   0.413836\n",
       "location_enc             0.226935\n",
       "size                     0.110929\n",
       "area_type_Built-up  Area 0.046728\n",
       "availability_enc         0.024976\n",
       "balcony                  0.000132\n",
       "bath                     0.000000\n",
       "dist_from_city           0.000000\n",
       "area_type_Plot  Area     0.000000\n",
       "total_sqft               0.000000\n",
       "const                    0.000000"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_signi_model_pvals = pd.DataFrame(price_signi_model.pvalues, columns=['P-value'])\n",
    "price_signi_model_pvals.sort_values(by='P-value',ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "4b08f987",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>P-value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>size</th>\n",
       "      <td>0.110929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>location_enc</th>\n",
       "      <td>0.226935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>area_type_Carpet  Area</th>\n",
       "      <td>0.413836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        P-value\n",
       "size                   0.110929\n",
       "location_enc           0.226935\n",
       "area_type_Carpet  Area 0.413836"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ins_vars = price_signi_model_pvals[1:][price_signi_model_pvals[1:]['P-value'] > 0.05]\n",
    "ins_vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "59c9714d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>area_type_Built-up  Area</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.756284</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.792916</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.296940</td>\n",
       "      <td>0.994361</td>\n",
       "      <td>1.837790</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-0.719504</td>\n",
       "      <td>1.830969</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-2.056041</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_sqft      bath   balcony  dist_from_city  area_type_Built-up  Area  \\\n",
       "3   -1.756284 -0.469333 -1.998151       -0.792916                         0   \n",
       "4    1.296940  0.994361  1.837790        0.039663                         1   \n",
       "7   -1.145248 -1.933026 -0.719504        1.830969                         0   \n",
       "8   -1.145248 -1.933026 -1.998151        0.039663                         0   \n",
       "9   -2.056041 -1.933026 -1.998151       -0.591079                         0   \n",
       "\n",
       "   area_type_Plot  Area  availability_enc  \n",
       "3                     0          2.000000  \n",
       "4                     0          3.000000  \n",
       "7                     0          3.000000  \n",
       "8                     0          0.000000  \n",
       "9                     0          1.000000  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ready_sign = df_ready_vif.drop(['size','location_enc','area_type_Carpet  Area'], axis=1)\n",
    "df_ready_sign.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "657b40d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6748, 8)\n",
      "(1688, 8)\n",
      "(6748,)\n",
      "(1688,)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.453</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.452</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   797.0</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 19 Jan 2024</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:59:13</td>     <th>  Log-Likelihood:    </th> <td> -35019.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6748</td>      <th>  AIC:               </th> <td>7.005e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6740</td>      <th>  BIC:               </th> <td>7.011e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>                <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                    <td>   71.8695</td> <td>    1.506</td> <td>   47.727</td> <td> 0.000</td> <td>   68.918</td> <td>   74.821</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>total_sqft</th>               <td>   27.4459</td> <td>    0.732</td> <td>   37.514</td> <td> 0.000</td> <td>   26.012</td> <td>   28.880</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bath</th>                     <td>    9.1532</td> <td>    0.749</td> <td>   12.222</td> <td> 0.000</td> <td>    7.685</td> <td>   10.621</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balcony</th>                  <td>   -2.3059</td> <td>    0.587</td> <td>   -3.930</td> <td> 0.000</td> <td>   -3.456</td> <td>   -1.156</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dist_from_city</th>           <td>   -9.8326</td> <td>    0.541</td> <td>  -18.162</td> <td> 0.000</td> <td>  -10.894</td> <td>   -8.771</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Built-up  Area</th> <td>    2.6634</td> <td>    1.414</td> <td>    1.884</td> <td> 0.060</td> <td>   -0.108</td> <td>    5.435</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Plot  Area</th>     <td>   57.0715</td> <td>    2.023</td> <td>   28.205</td> <td> 0.000</td> <td>   53.105</td> <td>   61.038</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>availability_enc</th>         <td>    1.2233</td> <td>    0.558</td> <td>    2.192</td> <td> 0.028</td> <td>    0.129</td> <td>    2.318</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>7334.694</td> <th>  Durbin-Watson:     </th>  <td>   2.046</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>1172646.585</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 5.249</td>  <th>  Prob(JB):          </th>  <td>    0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>66.722</td>  <th>  Cond. No.          </th>  <td>    11.5</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.453\n",
       "Model:                            OLS   Adj. R-squared:                  0.452\n",
       "Method:                 Least Squares   F-statistic:                     797.0\n",
       "Date:                Fri, 19 Jan 2024   Prob (F-statistic):               0.00\n",
       "Time:                        12:59:13   Log-Likelihood:                -35019.\n",
       "No. Observations:                6748   AIC:                         7.005e+04\n",
       "Df Residuals:                    6740   BIC:                         7.011e+04\n",
       "Df Model:                           7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "============================================================================================\n",
       "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------\n",
       "const                       71.8695      1.506     47.727      0.000      68.918      74.821\n",
       "total_sqft                  27.4459      0.732     37.514      0.000      26.012      28.880\n",
       "bath                         9.1532      0.749     12.222      0.000       7.685      10.621\n",
       "balcony                     -2.3059      0.587     -3.930      0.000      -3.456      -1.156\n",
       "dist_from_city              -9.8326      0.541    -18.162      0.000     -10.894      -8.771\n",
       "area_type_Built-up  Area     2.6634      1.414      1.884      0.060      -0.108       5.435\n",
       "area_type_Plot  Area        57.0715      2.023     28.205      0.000      53.105      61.038\n",
       "availability_enc             1.2233      0.558      2.192      0.028       0.129       2.318\n",
       "==============================================================================\n",
       "Omnibus:                     7334.694   Durbin-Watson:                   2.046\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1172646.585\n",
       "Skew:                           5.249   Prob(JB):                         0.00\n",
       "Kurtosis:                      66.722   Cond. No.                         11.5\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df_ready_sign\n",
    "X = sm.add_constant(X)\n",
    "X_train_signi, X_test_signi, y_train_signi, y_test_signi = train_test_split(X, y, test_size=0.2, random_state=100)\n",
    "print(X_train_signi.shape)\n",
    "print(X_test_signi.shape)\n",
    "print(y_train_signi.shape)\n",
    "print(y_test_signi.shape)\n",
    "price_signi_model = sm.OLS(y_train_signi, X_train_signi).fit()\n",
    "price_signi_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "03387037",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_ready_sign.drop('area_type_Built-up  Area', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "2dc8daa2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "      <th>balcony*bath</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.756284</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.792916</td>\n",
       "      <td>0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.296940</td>\n",
       "      <td>0.994361</td>\n",
       "      <td>1.837790</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.827426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-0.719504</td>\n",
       "      <td>1.830969</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.390820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-1.145248</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.039663</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.862479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-2.056041</td>\n",
       "      <td>-1.933026</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.862479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10649</th>\n",
       "      <td>-0.857932</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>1.881429</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10650</th>\n",
       "      <td>-0.602220</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>1.275917</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10651</th>\n",
       "      <td>-0.324960</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.691998</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10653</th>\n",
       "      <td>-0.623769</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>-0.591079</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10655</th>\n",
       "      <td>-0.527518</td>\n",
       "      <td>-0.469333</td>\n",
       "      <td>-1.998151</td>\n",
       "      <td>0.771323</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.937798</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8436 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       total_sqft      bath   balcony  dist_from_city  area_type_Plot  Area  \\\n",
       "3       -1.756284 -0.469333 -1.998151       -0.792916                     0   \n",
       "4        1.296940  0.994361  1.837790        0.039663                     0   \n",
       "7       -1.145248 -1.933026 -0.719504        1.830969                     0   \n",
       "8       -1.145248 -1.933026 -1.998151        0.039663                     0   \n",
       "9       -2.056041 -1.933026 -1.998151       -0.591079                     0   \n",
       "...           ...       ...       ...             ...                   ...   \n",
       "10649   -0.857932 -0.469333 -1.998151        1.881429                     0   \n",
       "10650   -0.602220 -0.469333 -1.998151        1.275917                     0   \n",
       "10651   -0.324960 -0.469333 -1.998151       -0.691998                     0   \n",
       "10653   -0.623769 -0.469333 -1.998151       -0.591079                     0   \n",
       "10655   -0.527518 -0.469333 -1.998151        0.771323                     0   \n",
       "\n",
       "       availability_enc  balcony*bath  \n",
       "3              2.000000      0.937798  \n",
       "4              3.000000      1.827426  \n",
       "7              3.000000      1.390820  \n",
       "8              0.000000      3.862479  \n",
       "9              1.000000      3.862479  \n",
       "...                 ...           ...  \n",
       "10649          0.000000      0.937798  \n",
       "10650          0.000000      0.937798  \n",
       "10651          0.000000      0.937798  \n",
       "10653          3.000000      0.937798  \n",
       "10655          0.000000      0.937798  \n",
       "\n",
       "[8436 rows x 7 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ready_sign['balcony*bath'] = df_ready_sign['balcony']*df_ready_sign['bath']\n",
    "df_ready_sign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "d2dd7bc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6748, 8)\n",
      "(1688, 8)\n",
      "(6748,)\n",
      "(1688,)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.458</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.458</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   815.0</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Fri, 19 Jan 2024</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>12:59:23</td>     <th>  Log-Likelihood:    </th> <td> -34984.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6748</td>      <th>  AIC:               </th> <td>6.998e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6740</td>      <th>  BIC:               </th> <td>7.004e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     7</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                <td>   70.6892</td> <td>    1.502</td> <td>   47.076</td> <td> 0.000</td> <td>   67.746</td> <td>   73.633</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>total_sqft</th>           <td>   27.1876</td> <td>    0.727</td> <td>   37.400</td> <td> 0.000</td> <td>   25.763</td> <td>   28.613</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bath</th>                 <td>    9.8342</td> <td>    0.747</td> <td>   13.163</td> <td> 0.000</td> <td>    8.370</td> <td>   11.299</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balcony</th>              <td>   -2.9111</td> <td>    0.584</td> <td>   -4.983</td> <td> 0.000</td> <td>   -4.056</td> <td>   -1.766</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dist_from_city</th>       <td>  -10.0197</td> <td>    0.539</td> <td>  -18.597</td> <td> 0.000</td> <td>  -11.076</td> <td>   -8.964</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>area_type_Plot  Area</th> <td>   55.2214</td> <td>    1.982</td> <td>   27.858</td> <td> 0.000</td> <td>   51.336</td> <td>   59.107</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>availability_enc</th>     <td>    1.4972</td> <td>    0.552</td> <td>    2.710</td> <td> 0.007</td> <td>    0.414</td> <td>    2.580</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>balcony*bath</th>         <td>    4.1913</td> <td>    0.493</td> <td>    8.503</td> <td> 0.000</td> <td>    3.225</td> <td>    5.158</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>7390.600</td> <th>  Durbin-Watson:     </th>  <td>   2.045</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>1225069.697</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 5.308</td>  <th>  Prob(JB):          </th>  <td>    0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td>68.149</td>  <th>  Cond. No.          </th>  <td>    11.2</td>  \n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.458\n",
       "Model:                            OLS   Adj. R-squared:                  0.458\n",
       "Method:                 Least Squares   F-statistic:                     815.0\n",
       "Date:                Fri, 19 Jan 2024   Prob (F-statistic):               0.00\n",
       "Time:                        12:59:23   Log-Likelihood:                -34984.\n",
       "No. Observations:                6748   AIC:                         6.998e+04\n",
       "Df Residuals:                    6740   BIC:                         7.004e+04\n",
       "Df Model:                           7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================\n",
       "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------\n",
       "const                   70.6892      1.502     47.076      0.000      67.746      73.633\n",
       "total_sqft              27.1876      0.727     37.400      0.000      25.763      28.613\n",
       "bath                     9.8342      0.747     13.163      0.000       8.370      11.299\n",
       "balcony                 -2.9111      0.584     -4.983      0.000      -4.056      -1.766\n",
       "dist_from_city         -10.0197      0.539    -18.597      0.000     -11.076      -8.964\n",
       "area_type_Plot  Area    55.2214      1.982     27.858      0.000      51.336      59.107\n",
       "availability_enc         1.4972      0.552      2.710      0.007       0.414       2.580\n",
       "balcony*bath             4.1913      0.493      8.503      0.000       3.225       5.158\n",
       "==============================================================================\n",
       "Omnibus:                     7390.600   Durbin-Watson:                   2.045\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1225069.697\n",
       "Skew:                           5.308   Prob(JB):                         0.00\n",
       "Kurtosis:                      68.149   Cond. No.                         11.2\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df_ready_sign\n",
    "X = sm.add_constant(X)\n",
    "X_train_inter, X_test_inter, y_train_inter, y_test_inter = train_test_split(X, y, test_size=0.2, random_state=100)\n",
    "print(X_train_inter.shape)\n",
    "print(X_test_inter.shape)\n",
    "print(y_train_inter.shape)\n",
    "print(y_test_inter.shape)\n",
    "price_inter_model = sm.OLS(y_train_inter, X_train_inter).fit()\n",
    "price_inter_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "b54b3af6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(3,3, figsize=(15,8))\n",
    "\n",
    "for col, subplot in zip(X.columns, ax.flatten()):\n",
    "    z = sns.scatterplot(X[col], price_inter_model.resid, ax=subplot)\n",
    "    z.set_xlabel(col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "bbc157ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('f-value', 28.129956493434666), ('p-value', 1.977696806526654e-38)]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create vector of result parmeters\n",
    "name = ['f-value','p-value']\n",
    "\n",
    "# perform Breusch-Pagan test using residuals and independent variables\n",
    "# compute residuals using 'resid'\n",
    "# 'exog' returns the independent variables in the model alng with the intercept\n",
    "test = sms.het_breuschpagan(price_inter_model.resid, price_inter_model.model.exog)\n",
    "\n",
    "# print the output\n",
    "# use 'lzip' to zip the column names and test results\n",
    "# use 'test[2:]' to retrieve the F-statistic and its corresponding p-value \n",
    "lzip(name, test[2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "a49753fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "qqplot(price_inter_model.resid, line='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "e6d35303",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test statistic: 0.6904961466789246\n",
      "P-Value: 0.0\n"
     ]
    }
   ],
   "source": [
    "# perform Shapiro Wilk test using 'shapiro()' from scipy library\n",
    "# shapiro() returns a tuple having the values of test statistics and the corresponding p-value\n",
    "# 'resid' returns the residuals in the model\n",
    "# pass the residuals to 'shapiro()'\n",
    "stat, p_value = shapiro(price_inter_model.resid)\n",
    "\n",
    "# print the test statistic and corresponding p-value \n",
    "print('Test statistic:', stat)\n",
    "print('P-Value:', p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "bdae7891",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "train_pred = price_inter_model.predict(X_train_inter)\n",
    "\n",
    "test_pred = price_inter_model.predict(X_test_inter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "88a7bd5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE) on training set:  1864.8252\n",
      "Mean Squared Error (MSE) on test set:  2594.9181\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mse_train = round(mean_squared_error(y_train_inter, train_pred),4)\n",
    "\n",
    "\n",
    "print(\"Mean Squared Error (MSE) on training set: \", mse_train)\n",
    "\n",
    "mse_test = round(mean_squared_error(y_test_inter, test_pred),4)\n",
    "\n",
    "print(\"Mean Squared Error (MSE) on test set: \", mse_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "8cf14ac6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error (RMSE) on training set:  43.1836\n",
      "Root Mean Squared Error (RMSE) on test set:  50.9403\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mse_train = mean_squared_error(y_train_inter, train_pred)\n",
    "\n",
    "rmse_train = round(np.sqrt(mse_train), 4)\n",
    "\n",
    "print(\"Root Mean Squared Error (RMSE) on training set: \", rmse_train)\n",
    "\n",
    "mse_test = mean_squared_error(y_test_inter, test_pred)\n",
    "\n",
    "rmse_test = round(np.sqrt(mse_test), 4)\n",
    "\n",
    "print(\"Root Mean Squared Error (RMSE) on test set: \", rmse_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ae77d42b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE) on training set:  24.5902\n",
      "Mean Absolute Error (MAE) on test set:  26.8614\n"
     ]
    }
   ],
   "source": [
    "\n",
    "mae_train = round(mean_absolute_error(y_train_inter, train_pred),4)\n",
    "\n",
    "print(\"Mean Absolute Error (MAE) on training set: \", mae_train)\n",
    "\n",
    "mae_test = round(mean_absolute_error(y_test_inter, test_pred),4)\n",
    "\n",
    "print(\"Mean Absolute Error (MAE) on test set: \", mae_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "632c4667",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mape(actual, predicted):\n",
    "    return (np.mean(np.abs((actual - predicted) / actual)) * 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "1736fcfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Percentage Error (MAPE) on training set:  33.4029\n",
      "Mean Absolute Percentage Error (MAPE) on test set:  36.0728\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "mape_train = round(mape(y_train_inter, train_pred),4)\n",
    "\n",
    "print(\"Mean Absolute Percentage Error (MAPE) on training set: \", mape_train)\n",
    "\n",
    "\n",
    "mape_test = round(mape(y_test_inter, test_pred),4)\n",
    "\n",
    "print(\"Mean Absolute Percentage Error (MAPE) on test set: \", mape_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "458fa25f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a list of column names\n",
    "cols = ['Model_Name', 'R-squared', 'Adj. R-squared', 'MSE', 'RMSE', 'MAE', 'MAPE']\n",
    "\n",
    "# creating a empty dataframe of the colums\n",
    "result_table = pd.DataFrame(columns = cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c8346c36",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_full = price_full_model.predict(X_test_full)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "0127af9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>R-squared</th>\n",
       "      <th>Adj. R-squared</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.453245</td>\n",
       "      <td>0.452434</td>\n",
       "      <td>2622.147668</td>\n",
       "      <td>51.206910</td>\n",
       "      <td>27.105316</td>\n",
       "      <td>36.620986</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Model_Name  R-squared  Adj. R-squared         MSE      RMSE       MAE  \\\n",
       "0  MLR Full Model   0.453245        0.452434 2622.147668 51.206910 27.105316   \n",
       "\n",
       "       MAPE  \n",
       "0 36.620986  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_full_model_metrics = pd.Series({'Model_Name': \"MLR Full Model\",\n",
    "                     'R-squared': price_full_model.rsquared,\n",
    "                     'Adj. R-squared': price_full_model.rsquared_adj,\n",
    "                     'MSE': mean_squared_error(y_test_full, y_pred_full),\n",
    "                     'RMSE': rmse(y_test_full, y_pred_full),\n",
    "                     'MAE': mean_absolute_error(y_test_full, y_pred_full),\n",
    "                     'MAPE': mape(y_test_full, y_pred_full)\n",
    "                   })\n",
    "\n",
    "# append the values to the result table\n",
    "result_table = result_table.append(price_full_model_metrics, ignore_index = True)\n",
    "\n",
    "# print the result table\n",
    "result_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "28da5787",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_signi = price_signi_model.predict(X_test_signi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "589fff1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>R-squared</th>\n",
       "      <th>Adj. R-squared</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.453245</td>\n",
       "      <td>0.452434</td>\n",
       "      <td>2622.147668</td>\n",
       "      <td>51.206910</td>\n",
       "      <td>27.105316</td>\n",
       "      <td>36.620986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.452881</td>\n",
       "      <td>0.452313</td>\n",
       "      <td>2623.453769</td>\n",
       "      <td>51.219662</td>\n",
       "      <td>27.199139</td>\n",
       "      <td>36.774559</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Model_Name  R-squared  Adj. R-squared         MSE      RMSE       MAE  \\\n",
       "0  MLR Full Model   0.453245        0.452434 2622.147668 51.206910 27.105316   \n",
       "1  MLR Full Model   0.452881        0.452313 2623.453769 51.219662 27.199139   \n",
       "\n",
       "       MAPE  \n",
       "0 36.620986  \n",
       "1 36.774559  "
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_signi_model_metrics = pd.Series({'Model_Name': \"MLR Full Model\",\n",
    "                     'R-squared': price_signi_model.rsquared,\n",
    "                     'Adj. R-squared': price_signi_model.rsquared_adj,\n",
    "                     'MSE': mean_squared_error(y_test_signi, y_pred_signi),\n",
    "                     'RMSE': rmse(y_test_signi, y_pred_signi),\n",
    "                     'MAE': mean_absolute_error(y_test_signi, y_pred_signi),\n",
    "                     'MAPE': mape(y_test_signi, y_pred_signi)\n",
    "                   })\n",
    "\n",
    "# append the values to the result table\n",
    "result_table = result_table.append(price_signi_model_metrics, ignore_index = True)\n",
    "\n",
    "# print the result table\n",
    "result_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "f2329018",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_inter = price_inter_model.predict(X_test_inter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "17a2333f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>R-squared</th>\n",
       "      <th>Adj. R-squared</th>\n",
       "      <th>MSE</th>\n",
       "      <th>RMSE</th>\n",
       "      <th>MAE</th>\n",
       "      <th>MAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.453245</td>\n",
       "      <td>0.452434</td>\n",
       "      <td>2622.147668</td>\n",
       "      <td>51.206910</td>\n",
       "      <td>27.105316</td>\n",
       "      <td>36.620986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.452881</td>\n",
       "      <td>0.452313</td>\n",
       "      <td>2623.453769</td>\n",
       "      <td>51.219662</td>\n",
       "      <td>27.199139</td>\n",
       "      <td>36.774559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>MLR Full Model</td>\n",
       "      <td>0.458402</td>\n",
       "      <td>0.457840</td>\n",
       "      <td>2594.918149</td>\n",
       "      <td>50.940339</td>\n",
       "      <td>26.861400</td>\n",
       "      <td>36.072766</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Model_Name  R-squared  Adj. R-squared         MSE      RMSE       MAE  \\\n",
       "0  MLR Full Model   0.453245        0.452434 2622.147668 51.206910 27.105316   \n",
       "1  MLR Full Model   0.452881        0.452313 2623.453769 51.219662 27.199139   \n",
       "2  MLR Full Model   0.458402        0.457840 2594.918149 50.940339 26.861400   \n",
       "\n",
       "       MAPE  \n",
       "0 36.620986  \n",
       "1 36.774559  \n",
       "2 36.072766  "
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_inter_model_metrics = pd.Series({'Model_Name': \"MLR Full Model\",\n",
    "                     'R-squared': price_inter_model.rsquared,\n",
    "                     'Adj. R-squared': price_inter_model.rsquared_adj,\n",
    "                     'MSE': mean_squared_error(y_test_inter, y_pred_inter),\n",
    "                     'RMSE': rmse(y_test_inter, y_pred_inter),\n",
    "                     'MAE': mean_absolute_error(y_test_inter, y_pred_inter),\n",
    "                     'MAPE': mape(y_test_inter, y_pred_inter)\n",
    "                   })\n",
    "\n",
    "# append the values to the result table\n",
    "result_table = result_table.append(price_inter_model_metrics, ignore_index = True)\n",
    "\n",
    "# print the result table\n",
    "result_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "3cd575cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['const', 'total_sqft', 'bath', 'balcony', 'dist_from_city',\n",
      "       'area_type_Plot  Area', 'availability_enc', 'balcony*bath'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# import functions to perform feature selection\n",
    "from mlxtend.feature_selection import SequentialFeatureSelector as sfs\n",
    "#from sklearn.feature_selection import SelectFromModel\n",
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "# import function to perform linear regression\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# split data into train subset and test subset\n",
    "# set 'random_state' to generate the same dataset each time you run the code \n",
    "# 'test_size' returns the proportion of data to be included in the testing set\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 10)\n",
    "\n",
    "# initiate linear regression model to use in feature selection\n",
    "linreg_rfe = LinearRegression()\n",
    "\n",
    "# build the RFE model\n",
    "# pass the regression model to 'estimator'\n",
    "# pass number of required features to 'n_features_to_select'\n",
    "# if we do not pass the number of features, RFE considers half of the features\n",
    "rfe_model = RFE(estimator=linreg_rfe, n_features_to_select=8)\n",
    "\n",
    "# fit the RFE model on the training dataset using fit()\n",
    "rfe_model = rfe_model.fit(X_train, y_train)\n",
    "\n",
    "# create a series containing feature and its corresponding rank obtained from RFE\n",
    "# 'ranking_' returns the rank of each variable after applying RFE\n",
    "# pass the ranks as the 'data' of a series\n",
    "# 'index' assigns feature names as index of a series \n",
    "feat_index = pd.Series(data = rfe_model.ranking_, index = X_train.columns)\n",
    "\n",
    "# select the features with rank = 1\n",
    "# 'index' returns the indices of a series (i.e. features with rank=1) \n",
    "signi_feat_rfe = feat_index[feat_index==1].index\n",
    "\n",
    "# print the significant features obtained from RFE\n",
    "print(signi_feat_rfe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "be0df20f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4407641000396264"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# initiate linear regression\n",
    "linreg = LinearRegression()\n",
    "\n",
    "# build the model using new_X_train and y_train\n",
    "linreg.fit(X_train, y_train)\n",
    "\n",
    "# check the score\n",
    "linreg.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "69ecd1eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a generalized function to calculate the RMSE values test set\n",
    "def get_test_rmse(model):\n",
    "    \n",
    "    # For testing set:\n",
    "    # test_pred: prediction made by the model on the test dataset 'X_test'\n",
    "    # y_test: actual values of the target variable for the test dataset\n",
    "\n",
    "    # predict the output of the target variable from the test data\n",
    "    test_pred = model.predict(X_test_full)\n",
    "\n",
    "    # MSE for the test data\n",
    "    mse_test = mean_squared_error(y_test_full, test_pred)\n",
    "\n",
    "    # take the square root of the MSE to calculate the RMSE\n",
    "    # round the value upto 4 digits using 'round()'\n",
    "    rmse_test = round(np.sqrt(mse_test), 4)\n",
    "\n",
    "    # return the test RMSE\n",
    "    return(rmse_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "423c5023",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE on test set: 51.2053\n"
     ]
    }
   ],
   "source": [
    "# use Ridge() to perform ridge regression\n",
    "# 'alpha' assigns the regularization strength to the model\n",
    "# 'max_iter' assigns maximum number of iterations for the model to run \n",
    "ridge = Ridge(alpha = 1, max_iter = 500)\n",
    "\n",
    "# fit the model on train set\n",
    "ridge.fit(X_train_full, y_train_full)\n",
    "\n",
    "# print RMSE for test set\n",
    "# call the function 'get_test_rmse'\n",
    "print('RMSE on test set:', get_test_rmse(ridge))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "3d43195d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters for Elastic Net Regression:  {'alpha': 0.001, 'l1_ratio': 0.0001} \n",
      "\n",
      "RMSE on test set: 51.1965\n"
     ]
    }
   ],
   "source": [
    "# create a dictionary with hyperparameters and its values\n",
    "# 'alpha' assigns the regularization strength to the model\n",
    "# 'l1_ratio' is the ElasticNet mixing parameter\n",
    "# 'max_iter' assigns maximum number of iterations for the model to run\n",
    "tuned_paramaters = [{'alpha':[0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 20, 40, 60],\n",
    "                      'l1_ratio':[0.0001, 0.0002, 0.001, 0.01, 0.1, 0.2]}]\n",
    "\n",
    "# initiate the elastic net regression model  \n",
    "enet = ElasticNet()\n",
    "\n",
    "# use GridSearchCV() to find the optimal value of alpha and l1_ratio\n",
    "# estimator: pass the elastic net regression model\n",
    "# param_grid: pass the list 'tuned_parameters'\n",
    "# cv: number of folds in k-fold i.e. here cv = 10\n",
    "enet_grid = GridSearchCV(estimator = enet, \n",
    "                          param_grid = tuned_paramaters, \n",
    "                          cv = 10)\n",
    "\n",
    "# fit the model on X_train and y_train using fit()\n",
    "enet_grid.fit(X_train_full, y_train_full)\n",
    "\n",
    "# get the best parameters\n",
    "print('Best parameters for Elastic Net Regression: ', enet_grid.best_params_, '\\n')\n",
    "\n",
    "# print the RMSE for the test set using the model having optimal value of alpha and l1-ratio\n",
    "print('RMSE on test set:', get_test_rmse(enet_grid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "dc242ef9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters for Lasso Regression:  {'alpha': 0.1} \n",
      "\n",
      "RMSE on test set: 44.4922\n"
     ]
    }
   ],
   "source": [
    "# create a dictionary with hyperparameters and its values\n",
    "# 'alpha' assigns the regularization strength to the model\n",
    "# 'max_iter' assigns maximum number of iterations for the model to run\n",
    "tuned_paramaters = [{'alpha':[1e-15, 1e-10, 1e-8, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 20]}]\n",
    "                     \n",
    "# 'max_iter':100,500,1000,1500,2000\n",
    " \n",
    "# initiate the lasso regression model \n",
    "lasso = Lasso()\n",
    "\n",
    "# use GridSearchCV() to find the optimal value of alpha\n",
    "# estimator: pass the lasso regression model\n",
    "# param_grid: pass the list 'tuned_parameters'\n",
    "# cv: number of folds in k-fold i.e. here cv = 10\n",
    "lasso_grid = GridSearchCV(estimator = lasso, \n",
    "                          param_grid = tuned_paramaters, \n",
    "                          cv = 10)\n",
    "\n",
    "# fit the model on X_train and y_train using fit()\n",
    "lasso_grid.fit(X_train_inter, y_train_inter)\n",
    "\n",
    "# get the best parameters\n",
    "print('Best parameters for Lasso Regression: ', lasso_grid.best_params_, '\\n')\n",
    "\n",
    "# print the RMSE for the test set using the model having optimal value of alpha\n",
    "print('RMSE on test set:', get_test_rmse(lasso_grid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "345f48ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>total_sqft</th>\n",
       "      <th>bath</th>\n",
       "      <th>balcony</th>\n",
       "      <th>dist_from_city</th>\n",
       "      <th>area_type_Plot  Area</th>\n",
       "      <th>availability_enc</th>\n",
       "      <th>balcony*bath</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.180291</td>\n",
       "      <td>-1.311147</td>\n",
       "      <td>-0.774311</td>\n",
       "      <td>-1.486428</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.015236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.059911</td>\n",
       "      <td>-0.539236</td>\n",
       "      <td>-0.774311</td>\n",
       "      <td>-0.744403</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.417537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.000557</td>\n",
       "      <td>0.232674</td>\n",
       "      <td>0.493522</td>\n",
       "      <td>0.342751</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.114830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.121773</td>\n",
       "      <td>-0.539236</td>\n",
       "      <td>-2.042145</td>\n",
       "      <td>0.221956</td>\n",
       "      <td>0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.101199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.063255</td>\n",
       "      <td>-1.311147</td>\n",
       "      <td>-2.042145</td>\n",
       "      <td>-0.537326</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.677552</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     const  total_sqft      bath   balcony  dist_from_city  \\\n",
       "0 1.000000   -0.180291 -1.311147 -0.774311       -1.486428   \n",
       "1 1.000000   -0.059911 -0.539236 -0.774311       -0.744403   \n",
       "2 1.000000   -0.000557  0.232674  0.493522        0.342751   \n",
       "3 1.000000   -0.121773 -0.539236 -2.042145        0.221956   \n",
       "4 1.000000   -0.063255 -1.311147 -2.042145       -0.537326   \n",
       "\n",
       "   area_type_Plot  Area  availability_enc  balcony*bath  \n",
       "0                     0          3.000000      1.015236  \n",
       "1                     0          3.000000      0.417537  \n",
       "2                     0          3.000000      0.114830  \n",
       "3                     0          3.000000      1.101199  \n",
       "4                     1          3.000000      2.677552  "
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "real_test = pd.read_csv('processed_test4')\n",
    "\n",
    "real_test = sm.add_constant(real_test)\n",
    "real_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d8a4c82d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2664,)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_real_pred = price_inter_model.predict(real_test)\n",
    "y_real_pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "f342422c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       78.790000\n",
       "1       79.710000\n",
       "2       73.060000\n",
       "3       74.900000\n",
       "4      138.340000\n",
       "          ...    \n",
       "2659    86.810000\n",
       "2660   120.190000\n",
       "2661    71.240000\n",
       "2662   101.460000\n",
       "2663    56.030000\n",
       "Length: 2664, dtype: float64"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_real_pred_rnd = np.round(y_real_pred,2)\n",
    "y_real_pred_rnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "116c5af2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_real_pred_rnd.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "bd540f71",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_real_pred_rnd.to_csv('test_submit5.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "347a5895",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "        if (window._pyforest_update_imports_cell) { window._pyforest_update_imports_cell('from sklearn.model_selection import GridSearchCV\\nfrom sklearn.linear_model import ElasticNet\\nfrom sklearn.linear_model import LinearRegression\\nfrom sklearn.linear_model import Ridge\\nfrom sklearn.linear_model import Lasso'); }\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters for Lasso Regression:  {'alpha': 0.1} \n",
      "\n",
      "RMSE on test set: 51.2029\n"
     ]
    }
   ],
   "source": [
    "# create a dictionary with hyperparameters and its values\n",
    "# 'alpha' assigns the regularization strength to the model\n",
    "# 'max_iter' assigns maximum number of iterations for the model to run\n",
    "tuned_paramaters = [{'alpha':[1e-15, 1e-10, 1e-8, 0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 20]}]\n",
    "                     \n",
    "# 'max_iter':100,500,1000,1500,2000\n",
    " \n",
    "# initiate the lasso regression model \n",
    "lasso = Lasso()\n",
    "\n",
    "# use GridSearchCV() to find the optimal value of alpha\n",
    "# estimator: pass the lasso regression model\n",
    "# param_grid: pass the list 'tuned_parameters'\n",
    "# cv: number of folds in k-fold i.e. here cv = 10\n",
    "lasso_grid = GridSearchCV(estimator = lasso, \n",
    "                          param_grid = tuned_paramaters, \n",
    "                          cv = 10)\n",
    "\n",
    "# fit the model on X_train and y_train using fit()\n",
    "lasso_grid.fit(X_train_full, y_train_full)\n",
    "\n",
    "# get the best parameters\n",
    "print('Best parameters for Lasso Regression: ', lasso_grid.best_params_, '\\n')\n",
    "\n",
    "# print the RMSE for the test set using the model having optimal value of alpha\n",
    "print('RMSE on test set:', get_test_rmse(lasso_grid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "88023000",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2664,)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_real_pred_lasso = lasso_grid.predict(real_test)\n",
    "y_real_pred_lasso.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "93e10c09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       78.790000\n",
       "1       79.710000\n",
       "2       73.060000\n",
       "3       74.900000\n",
       "4      138.340000\n",
       "          ...    \n",
       "2659    86.810000\n",
       "2660   120.190000\n",
       "2661    71.240000\n",
       "2662   101.460000\n",
       "2663    56.030000\n",
       "Length: 2664, dtype: float64"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_real_pred_lasso_rnd = np.round(y_real_pred,2)\n",
    "y_real_pred_lasso_rnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "572ec97e",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_real_pred_lasso_rnd.to_csv('test_submit6.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41bc19ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
